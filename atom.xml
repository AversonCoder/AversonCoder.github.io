<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Averson</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-23T01:24:11.148Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Averson</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>handler</title>
    <link href="http://yoursite.com/2017/08/29/handler/"/>
    <id>http://yoursite.com/2017/08/29/handler/</id>
    <published>2017-08-29T01:23:58.000Z</published>
    <updated>2017-08-23T01:24:11.148Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>bitmap</title>
    <link href="http://yoursite.com/2017/08/28/bitmap/"/>
    <id>http://yoursite.com/2017/08/28/bitmap/</id>
    <published>2017-08-28T01:23:39.000Z</published>
    <updated>2017-08-23T01:23:53.571Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>activity-source-code</title>
    <link href="http://yoursite.com/2017/08/27/activity-source-code/"/>
    <id>http://yoursite.com/2017/08/27/activity-source-code/</id>
    <published>2017-08-27T01:23:07.000Z</published>
    <updated>2017-08-23T01:23:31.930Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>android-custom-view-1</title>
    <link href="http://yoursite.com/2017/08/23/android-custom-view-1/"/>
    <id>http://yoursite.com/2017/08/23/android-custom-view-1/</id>
    <published>2017-08-23T01:26:17.000Z</published>
    <updated>2017-08-23T01:26:17.762Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>architecture</title>
    <link href="http://yoursite.com/2017/08/01/architecture/"/>
    <id>http://yoursite.com/2017/08/01/architecture/</id>
    <published>2017-08-01T01:25:05.000Z</published>
    <updated>2017-08-23T01:25:43.435Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>rxjava</title>
    <link href="http://yoursite.com/2017/07/25/rxjava/"/>
    <id>http://yoursite.com/2017/07/25/rxjava/</id>
    <published>2017-07-25T01:22:34.000Z</published>
    <updated>2017-08-23T01:22:51.411Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java-optimizing</title>
    <link href="http://yoursite.com/2017/07/20/java-optimizing/"/>
    <id>http://yoursite.com/2017/07/20/java-optimizing/</id>
    <published>2017-07-20T01:15:57.000Z</published>
    <updated>2017-08-23T01:16:13.874Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kotlin 中 Lambda 的使用</title>
    <link href="http://yoursite.com/2017/07/10/kotlin-lambda/"/>
    <id>http://yoursite.com/2017/07/10/kotlin-lambda/</id>
    <published>2017-07-10T01:13:31.000Z</published>
    <updated>2017-08-24T10:06:48.132Z</updated>
    
    <content type="html"><![CDATA[<p><code>Kotlin Lambda</code> 记录</p>
<a id="more"></a>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><code>Java</code> 中 <code>Lambda</code> 的简介</li>
<li><code>Kotlin</code> 中 <code>Lambda</code> 表达式介绍</li>
</ul>
<h2 id="Java-中-Lambda-的简介"><a href="#Java-中-Lambda-的简介" class="headerlink" title="Java 中 Lambda 的简介"></a>Java 中 Lambda 的简介</h2><p><code>Lambda</code> 表达式是在 <code>Java 8</code> 开始引入一项重大的改变。简而言之，<code>Lambda</code> 表达式是一小段的代码块用来简化代码和更方便面向函数式编程。</p>
<p><strong>Lambda 作为方法参数的使用</strong></p>
<p>编程中，传递和存储这些行为代码（表达式）是常见的。比方说：当某个事件触发，你需要去处理或者应用某个操作作用于数据结构的所有元素身上。</p>
<p><strong>在 <code>Java 8</code> 以下</strong>，我们通常借助匿名内部类实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// run a task</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>那么对于函数式编程来说，函数作为一等公民，我们可以视为一个值。函数可以作为值进行传递，而不是声明一个类然后将该类传递给方法。让函数作为值传递，你也可以不需要声明一个函数，相反，你可以直接传递一个代码块作为函数参数传递。</p>
<p>上述概念用数学表达式来说：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f(x) = x + 2</div><div class="line">y(x) = f(x) + 3</div></pre></td></tr></table></figure>
<p>这里 <code>f(x)</code> 完全可以视为值（3）的另一种表达。传递给 <code>y(x)</code> 作为运算的一部分处理。</p>
<p>对应到编程上，<code>f(x)</code> 作为一个函数传递给 <code>y(x)</code> 动态影响 <code>y(x)</code> 最终结果的形成。有助于函数更灵活和方便拓展。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// run a task</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>在 <code>Java 8</code> 中</strong>我们可以替换为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// f(x) = x + 2</span></div><div class="line">Runnable task = () -&gt; &#123; <span class="comment">//run a task &#125;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// y(x) = f(x) + 3</span></div><div class="line"><span class="keyword">new</span> Thread(task)</div><div class="line"></div><div class="line"><span class="comment">// 也可以不声明函数仅传递代码块</span></div><div class="line"><span class="keyword">new</span> Thread( () -&gt; &#123; <span class="comment">// run a task &#125; )</span></div></pre></td></tr></table></figure>
<p>其中 <code>() -&gt; { // run a task }</code> 便是 <code>Lambda</code> 表达式，语法规则如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">函数 = ( 参数 ) -&gt; &#123; 运算逻辑 &#125;</div></pre></td></tr></table></figure>
<p>有一点需要注意，<code>Lamdba</code> 更偏向于我们所认知的数学函数。即一个函数只有一个函数逻辑，同样的值产生同样的结果。</p>
<p>即：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">f(x) = x + 1</div><div class="line">x = 1</div><div class="line">f(1) = 1 + 1 = 2</div></pre></td></tr></table></figure>
<p>不存在说：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">f(x) = x + 1</div><div class="line">f(x) = x + 2 </div><div class="line">x = 1</div><div class="line">f(1) = 1 or 3</div></pre></td></tr></table></figure>
<p>因此这也对应 <code>Java 8</code> 中函数式接口注解（<code>@FunctionalInterface</code>）的概念，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@FunctionalInterface</div><div class="line">public interface Runnable &#123;</div><div class="line">    public abstract void run();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对应数学可以理解成 <code>f(x) = x</code>，其中 <code>x = 0</code>。</p>
<p>更多函数式的接口可以看 <code>java.util.function</code> 包下的定义。</p>
<h2 id="Kotlin-中-Lambda-表达式介绍"><a href="#Kotlin-中-Lambda-表达式介绍" class="headerlink" title="Kotlin 中 Lambda 表达式介绍"></a>Kotlin 中 Lambda 表达式介绍</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; 参数, 参数 -&gt; 实现逻辑 &#125;</div></pre></td></tr></table></figure>
<p>创建一个 <code>Lambda</code> 表达式：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> sum = &#123; num1, num2 -&gt; num1 + num2 &#125;</div><div class="line"><span class="keyword">val</span> actual = sum(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">val</span> expected = <span class="number">3</span></div><div class="line">Assert.assertEquals(expected, actual)</div></pre></td></tr></table></figure>
<p>直接执行一个 <code>Lambda</code></p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; println(<span class="string">"Averson"</span>) &#125;()</div></pre></td></tr></table></figure>
<p>上述代码没有什么可读性，可以使用 <code>kotlin</code> 提供的 run 执行一个<code>lambda</code> 更具备可读性。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">run &#123; println(<span class="string">"Averson"</span>) &#125;</div></pre></td></tr></table></figure>
<p>完整语法：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">IntStream.range(<span class="number">1</span>, <span class="number">10</span>)</div><div class="line">    .forEach(&#123; number: <span class="built_in">Int</span> -&gt;</div><div class="line">        println(number)</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<p>虽然较之于匿名内部类有了很大的改变，但是就看上去还有几点显得啰嗦：</p>
<ul>
<li>太多标点符号，阅读上不痛不痒的。</li>
<li>参数类型能从上下文中推断出来，因此可以省略。</li>
<li>该代码没必要在 <code>Lambda</code> 指定一个参数名（<code>it</code>）。</li>
</ul>
<p>在 <code>Kotlin</code> 中，当 <code>Lambda</code> 表达式是函数最后一个参数时，<code>Lambda</code> 可以移出函数的圆括号外。上面的代码中只有一个参数，所以我们可以把 <code>Lambda</code> 移到函数的圆括号后面。</p>
<p>综合上面说的我们可以简化一下：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">IntStream.range(<span class="number">1</span>, <span class="number">10</span>)</div><div class="line">    .forEach() &#123;</div><div class="line">        println(it)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>再者当函数只有一个参数的时候 “()” 也可以直接省略了，所以最后的结果是：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">IntStream.range(<span class="number">1</span>, <span class="number">10</span>)</div><div class="line">    .forEach &#123;</div><div class="line">        println(it)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>良好的编程风格包括 <strong>“编写更少的重复代码”</strong> 这一原则。在一些集合操作中，我们并不能完全符合这一原则。比如：常见的数据收集，我们不断重复进行 <code>for</code> 循环这些繁琐的代码。因此 <code>Kotlin</code> 提供良好的 <code>API</code> 来让我们减少这些繁琐的工作（<code>Java 8 Stream</code> 也可以做这事，主题原因不多加赘述增加篇幅）。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Feed</span></span>(<span class="keyword">val</span> content: String, <span class="keyword">val</span> tag: String)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">listHotFeeds</span><span class="params">(feeds: <span class="type">List</span>&lt;<span class="type">Feed</span>&gt;)</span></span>: List&lt;Feed&gt; &#123;</div><div class="line">    <span class="keyword">val</span> hotFeeds = ArrayList&lt;Feed&gt;()</div><div class="line">    <span class="keyword">for</span> (feed <span class="keyword">in</span> feeds) &#123;</div><div class="line">        <span class="keyword">if</span> (feed.tag == <span class="string">"Hot"</span>) &#123;</div><div class="line">            hotFeeds.add(feed)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> hotFeeds</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于这段代码曾几何时我们更想如果可以写成 <code>资讯.是热门资讯.收集</code> 这样该多好，因为这样的代码看起来更像一种自然的语言描述。当然这在 <code>Kotlin</code> 中是很容易实现的。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">listHotFeeds</span><span class="params">(feeds: <span class="type">List</span>&lt;<span class="type">Feed</span>&gt;)</span></span>: List&lt;Feed&gt; &#123;</div><div class="line">    <span class="keyword">return</span> feeds.filter &#123; feed -&gt; feed.tag == <span class="string">"Hot"</span> &#125;.toList()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再如我们想筛选出内容最长的资讯。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">findMaxContentFeed</span><span class="params">(feeds: <span class="type">List</span>&lt;<span class="type">Feed</span>&gt;)</span></span>: Feed? &#123;</div><div class="line">    <span class="keyword">var</span> maxContentFeed: Feed? = <span class="literal">null</span></div><div class="line">    <span class="keyword">var</span> maxLength = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> (feed <span class="keyword">in</span> feeds) &#123;</div><div class="line">        <span class="keyword">val</span> length = feed.content.length</div><div class="line">        <span class="keyword">if</span> (length &gt; maxLength) &#123;</div><div class="line">            maxLength = length</div><div class="line">            maxContentFeed = feed</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> maxContentFeed</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然而对于问题的本质思考我们第一时间应该想到的自然语言描述是 <code>资讯.根据最长内容得出结果</code>，显然这在 <code>Kotlin</code> 的标准库中也提供了。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">findMaxContentFeed</span><span class="params">(feeds: <span class="type">List</span>&lt;<span class="type">Feed</span>&gt;)</span></span>: Feed? &#123;</div><div class="line">    <span class="keyword">return</span> feeds.maxBy &#123; it.content.length &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简化的目的是为了可读性，尽管 <code>Lambda</code> 可以简化代码，但有的时候 <code>Lambda</code> 并不能增进可读性。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> upperCaseLatters = IntStream.range(<span class="number">65</span>, <span class="number">90</span>)</div><div class="line">        .mapToObj &#123; it.toChar() &#125;</div><div class="line">        .map &#123; Character.toString(it) &#125;</div><div class="line">        .toList()</div><div class="line"><span class="keyword">val</span> result = upperCaseLatters.joinToString(<span class="string">"-"</span>) &#123; it &#125;</div><div class="line">println(result)</div></pre></td></tr></table></figure>
<p>显然上述的 <code>joinToString(&quot;-&quot;) { it }</code> 并不能有助于阅读。</p>
<p>所以我们应该写成：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">upperCaseLetter.joinToString(separator = <span class="string">"-"</span>, transform = &#123; it &#125;)</div></pre></td></tr></table></figure>
<p>修改后我们可以很明确的知道了 “-“ 是分割符，而内容不需要转换操作，所以直接返回内容本身。</p>
<p>简而言之，具体问题具体分析，不管代码用什么方式写，只要保证一眼看上去清晰明了即可。</p>
<p>上述讲了很多都是 <code>Lambda</code> 内部的操作，现在看一下<strong>Lambda 访问局部变量</strong>。</p>
<p>在 Java 中当方法体内声明一个匿名内部类，你能在匿名内部类中引用方法参数和方法内的变量。而 <code>Lambda</code> 也能做到这些事。</p>
<p>比如我们为 Collection<string> 添加一个拓展函数用作 debug 用途：</string></p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> Collection<span class="type">&lt;String&gt;</span>.<span class="title">log</span><span class="params">(tag: <span class="type">String</span>)</span></span> &#123;</div><div class="line">    <span class="comment">// 在 Lambda 中访问参数 tag</span></div><div class="line">    forEach &#123; println(<span class="string">"<span class="variable">$tag</span>: <span class="variable">$it</span>"</span>) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Java</code> 和 <code>Kotlin</code> 的一个重要区别在于：在 <code>Kotlin</code> 的 <code>Lambda</code> 中不局限于访问 <code>final</code> 变量，你还可以修改变量值。</p>
<p>比方说在 <code>Java</code> 中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> temp = <span class="number">1</span>;</div><div class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">    println(temp); <span class="comment">// access temp must is final</span></div><div class="line">    temp = <span class="number">2</span>; <span class="comment">// not allow</span></div><div class="line">&#125;).start();</div></pre></td></tr></table></figure>
<p>折衷的处理办法是:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">int</span>[] temp = &#123; <span class="number">1</span> &#125;;</div><div class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">    temp[<span class="number">0</span>] = <span class="number">2</span>;</div><div class="line">&#125;).start();</div></pre></td></tr></table></figure>
<p>而 <code>Kotlin</code> 中你可以访问变量和修改变量（本质和折衷的方法异曲同工）：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> temp = <span class="number">1</span></div><div class="line">Thread &#123;</div><div class="line">    println(temp)</div><div class="line">    temp = <span class="number">2</span></div><div class="line">    println(temp)</div><div class="line">&#125;.start()</div></pre></td></tr></table></figure>
<p>因为当你访问一个 <code>val</code> 变量的时候和 <code>Java</code> 的没区别，但是对于非 <code>final</code> 的变量来说又是为什么它不用 <code>final</code> 而且还可以修改呢？本质上其实是将值包裹进一个对象里，在 <code>Lambda</code> 中操作这个对象，对象是不可变的，但是对象内部的值是可变的。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> IntRef temp = new IntRef();</div><div class="line">temp.element = <span class="number">1</span>;</div><div class="line">new Thread(() -&gt; &#123;</div><div class="line">    int var1 = temp.element;</div><div class="line">    System.<span class="keyword">out</span>.println(var1);</div><div class="line">    temp.element = <span class="number">2</span>;</div><div class="line">    var1 = temp.element</div><div class="line">    System.<span class="keyword">out</span>.println(var1);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>需要注意一点：如果 <code>Lambda</code> 作为事件处理逻辑，或者异步执行。那么只有在执行 <code>Lambda</code> 的时候变量才会发声修改。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">countButtonClicks</span><span class="params">(button: <span class="type">Button</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> clicks = <span class="number">0</span></div><div class="line">    button.setOnclick &#123;</div><div class="line">        clicks++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> clicks</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述函数永远返回 0。尽管按钮点击修改了 <code>clicks</code>，但是你并观察不到变化，因为 <code>onClick</code> 的处理在返回 <code>clicks</code> 之后。一个正确的处理方式应该是让 <code>clicks</code> 不作为局部变量而是作为一个类的属性进行存储。</p>
<p><strong>接下来看一下成员引用</strong>，设想一下，如果你需要作为参数传递的代码块被定义为函数。那该怎么处理？</p>
<p>答案是：你可以传递一个调用该函数的 <code>Lambda</code>（ { func() } ），但是这样做是多余的。在 <code>Kotlin</code> 中和 <code>Java 8</code> 一样，如果你需要把函数转化为一个值传递你可以使用 <code>::</code> 来表示。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 语法</span></div><div class="line">Class::member</div><div class="line"><span class="comment">// 使用</span></div><div class="line"><span class="keyword">val</span> getAppleWeight = Apple::weight</div><div class="line">apples.maxBy(getAppleWeight)</div></pre></td></tr></table></figure>
<p><code>Apple::weight</code> 相当于：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> getAppleWeight = &#123; apple:Apple -&gt; apple.weight &#125;</div></pre></td></tr></table></figure>
<p>函数也是同理，也可以直接省去函数赋值的步骤。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">runTask</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> welcome = ::welcome</div><div class="line">    Thread(welcome).start()</div><div class="line">    <span class="comment">// or</span></div><div class="line">    Thread(::welcome).start()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">welcome</span><span class="params">()</span></span> &#123;</div><div class="line">    println(<span class="string">"welcome"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>构造函数：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span></span>(<span class="keyword">val</span> weight: <span class="built_in">Int</span>, <span class="keyword">val</span> color: String)</div><div class="line"></div><div class="line"><span class="keyword">val</span> newApple = ::Apple</div><div class="line"><span class="keyword">val</span> apple = newApple(<span class="number">10</span>, <span class="string">"Green"</span>)</div><div class="line">println(apple)</div></pre></td></tr></table></figure>
<p>拓展函数：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> Apple.<span class="title">isHealth</span><span class="params">()</span></span> = weight &gt; <span class="number">20</span></div><div class="line"><span class="keyword">val</span> predicate = Apple::isHealth</div></pre></td></tr></table></figure>
<p>仅需记住一点，使用 <code>::</code> 语法时保证入参和返回值一致即可。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Kotlin Lambda&lt;/code&gt; 记录&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Google Architecture Components - Lifecycle</title>
    <link href="http://yoursite.com/2017/07/08/arch-lifecycle/"/>
    <id>http://yoursite.com/2017/07/08/arch-lifecycle/</id>
    <published>2017-07-08T14:36:28.000Z</published>
    <updated>2017-07-27T14:38:20.305Z</updated>
    
    <content type="html"><![CDATA[<p>关于 <code>Arch Lifecycle</code> 的一些摘要。</p>
<a id="more"></a>
<h2 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h2><p><code>Lifecycle</code> 是一个具有生命周期感知的组件。该组件可以根据 <code>Activity</code> 和 <code>Fragment</code> 的生命周期提供相关的调整行为，而好的生命周期控制能有效避免内存泄漏和应用崩溃。</p>
<p>官方文档有代码，只记录关键点，下同。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onStart();</div><div class="line">    locationListener.start();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onStop();</div><div class="line">    locationListener.stop();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当开启定位服务前我们应该做一些相关的检查和配置之类的操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onStart();</div><div class="line">    Util.checkUserStatus(result -&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (result) &#123;</div><div class="line">            myLocationListener.start();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onStop();</div><div class="line">    locationListener.stop();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么上述的代码如果还没检查完，就关闭了界面呢？这就会导致上下文泄漏了，且随着这样的操作越来越多 <code>onStart</code> 和  <code>onPause</code> 方法中的代码会变得愈发臃肿，这个时候我们会考虑到把这些相关代码独立出去封装到一个类中，并根据 <code>Activity</code>（<code>Fragent</code>）的生命周期作出相关的操作，这样能有效的解耦和减少代码的臃肿，那么 <code>Lifecycle</code> 就是一个很好的帮手。</p>
<p>相关类：</p>
<ul>
<li><code>LifecycleOwner</code> 是一个提供 <code>Lifecycle</code> 的接口。</li>
<li><code>LifecycleObserver</code> 是一个接收生命周期事件和状态的观察者接口。</li>
<li><code>Lifecycle</code> 是一个感知生命周期的接口，它用来分发和维护生命周期的事件和状态。</li>
<li><code>Event</code> 分发的生命周期事件，对应 <code>Activity</code> 的生命周期回调，由 <code>Lifecycle</code> 发出</li>
<li><code>State</code> 表示 <code>LifecycleOwner</code> 当前的状态</li>
</ul>
<p><img src="https://git.oschina.net/jocens/source/raw/master/lifecycle-states.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLocationListener</span> <span class="keyword">implements</span> <span class="title">LifecycleObserver</span> </span>&#123;</div><div class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_START)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123; <span class="comment">// conenct &#125;</span></div><div class="line"></div><div class="line">    <span class="meta">@OnLifecycleEvent</span>(Lifecycle.Event.ON_STOP)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123; <span class="comment">// disconnect &#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    getLifecycle().addObserver(<span class="keyword">new</span> MyLocationListener());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ul>
<li>保持 UI Controller（Activity 或 Fragment）尽可能的精简。</li>
<li><code>UI</code> 层不应该尝试去操作数据，相反，应该使用一个 <code>ViewModel</code> 来完成，当数据变化由 <code>ViewModel</code> 通知 <code>UI</code> 更新。 </li>
<li>尝试以<a href="https://en.wikipedia.org/wiki/Data-driven_programming" target="_blank" rel="external">数据驱动</a>的模式来驱动 <code>UI Layer</code>，因为 <code>UI Layer</code> 更多根据数据来更新视图或将用户操作通知到 <code>ViewModel</code>。把你的数据放到 <code>ViewModel</code> 中，让 <code>ViewModel</code> 作为 <code>UI Layer</code> 和 <code>Business Logic Layer</code> 的桥梁。当然获取数据的职责不是由 <code>ViewModel</code> 负责。<code>ViewModel</code> 应该调用合适的组件来完成这项工作，并将结果返回到 <code>UI</code> 层。 </li>
<li>使用 <code>Data Binding</code> 让 <code>UI Controller</code> 和 <code>Views</code> 之间的更整洁，这可以减少你 <code>UI Controller</code> 中 <code>View</code> 相关的模板代码（eg：findViewById…），不过不喜欢 <code>Data Binding</code> 可以使用 <code>ButterKnife</code> 之类的库来代替。</li>
<li>如果你的 UI 非常复杂，可以考虑创建一个 <code>Presenter Layer</code> 来处理 <code>UI</code> 的更新，虽然有点过度设计，但是这会让你的 <code>UI</code> 更容易测试。</li>
<li>不要在 <code>ViewModel</code> 中引用 <code>View</code> 或者 <code>Activity</code> 上下文，这样做的情况会导致 <code>Activity</code> 配置改变重新创建而 <code>ViewModel</code> 持有上下文从而引发内存泄漏的例子。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 &lt;code&gt;Arch Lifecycle&lt;/code&gt; 的一些摘要。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>ConstraintLayout</title>
    <link href="http://yoursite.com/2017/07/06/constraint-layout/"/>
    <id>http://yoursite.com/2017/07/06/constraint-layout/</id>
    <published>2017-07-06T13:40:46.000Z</published>
    <updated>2017-07-26T13:48:53.015Z</updated>
    
    <content type="html"><![CDATA[<p>约束布局是谷歌官方推荐使用的布局，它具有 <code>LinearLayout</code>、<code>RelativeLayout</code>、<code>PercentLayout</code>等特性。通过一系列约束能减少布局嵌套，极大了减少开发者编写布局的成本。</p>
<a id="more"></a>
<h2 id="IDE-中的基本介绍"><a href="#IDE-中的基本介绍" class="headerlink" title="IDE 中的基本介绍"></a>IDE 中的基本介绍</h2><p><img src="https://git.oschina.net/jocens/source/raw/master/constaint_layout_1.png" alt=""></p>
<p>圆圈和箭头指向表示了该 <code>View</code> 的约束规则，如图这里上边的圆点和箭头指向对齐的是父容器（parent），并距离 <code>16dp</code>，左边的圆圈和箭头指向对齐的是父容器（parent），也距离 <code>16dp</code>。那么 <code>XML</code> 中的写法如下。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"Hello World"</span></div><div class="line"></div><div class="line">    <span class="attr">android:layout_marginStart</span>=<span class="string">"16dp"</span></div><div class="line">    <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></div><div class="line"></div><div class="line">    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></div><div class="line">    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span>/&gt;</div></pre></td></tr></table></figure>
<p>约束的条件很直观，<code>TextView</code> 的 <code>Top</code> 连接至 <code>Parent</code> 的 <code>Top</code>， <code>TextView</code> 的 <code>Start</code> 连接到 <code>Parent</code> 的 <code>Left</code>，以此类推，对应的 <code>View</code> 和 <code>View</code> 之间可以通过 <code>ID</code> 进行约束控制位置。</p>
<p>接下来看由四个方形点组成的矩形表示 <code>View</code> 的大小，可以通过鼠标对 <code>View</code> 进行拉伸。</p>
<h2 id="Bias-amp-Match-Constraint"><a href="#Bias-amp-Match-Constraint" class="headerlink" title="Bias &amp; Match Constraint"></a>Bias &amp; Match Constraint</h2><p>当一个 <code>View</code> 水平或者垂直都有约束对象的时候，宽度（高度）设置为 <code>0dp</code>（<code>Match Constraint</code>） 可以将 <code>View</code> 的宽度延伸至有效约束范围同等大小，类似 <code>match_parent</code>，但是前者是适应到约束范围大小，后者是适应到父容器大小。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/txt_1"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"Hello World"</span></div><div class="line"></div><div class="line">    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></div><div class="line">    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span>/&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 左右有约束 分别是 txt_1, txt_3 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/txt_2"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"Hello World"</span></div><div class="line"></div><div class="line">    <span class="attr">app:layout_constraintStart_toEndOf</span>=<span class="string">"@id/txt_1"</span></div><div class="line">    <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">"@id/txt_3"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/txt_3"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"Hello World"</span></div><div class="line"></div><div class="line">    <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></div><div class="line">    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span>/&gt;</div></pre></td></tr></table></figure>
<p>现在 <code>txt_2</code> 有水平方向的约束范围，当宽度是 <code>0dp</code> 的时候，即我们说的 <code>match_constraint</code> 他会把宽度拓展到约束范围的大小，如下图所示：  </p>
<p><img src="https://git.oschina.net/jocens/source/raw/master/constaint_layout_2.png" alt=""></p>
<p>接下来看一下 <code>Bias</code>，它表示 <code>View</code> 在横向和纵向<strong>约束范围内</strong>的偏移，范围是 <code>0~1</code>，我们还是以上面的例子来说，首先把上面的例子中的 <code>txt_2</code> 改为 <code>wrap_content</code>。然后根据 <code>IDE</code> 右边提供的面板拉动 <code>Bias</code> 的进度条，就能看到效果了，一目了然。</p>
<p><img src="https://git.oschina.net/jocens/source/raw/master/constaint_layout_3.gif" alt=""></p>
<h2 id="Chain"><a href="#Chain" class="headerlink" title="Chain"></a>Chain</h2><p>将一组 <code>View</code> 组成一条链，它拥有三种模式由链头 <code>View</code> 控制，分别是 <code>spread</code>、<code>spread_inside</code>、<code>packed</code>。</p>
<p>还是以上面三个 <code>TextView</code> 为例，我们先把三个 <code>TextView</code> 都取消相关的约束。操作如下。</p>
<p><img src="https://git.oschina.net/jocens/source/raw/master/constaint_layout_4.gif" alt=""></p>
<p>点击该按钮可以调节模式。</p>
<p><img src="https://git.oschina.net/jocens/source/raw/master/constaint_layout_5.png" alt=""></p>
<p>当 <code>Views</code> 组成链式的情况，有如下属性可以使用：</p>
<p><code>spread</code> 和 <code>spread_inside</code> 可以使用如下属性，可以类比成 <code>LinearLayout</code> 的 <code>weight</code>，当然也要像 <code>LinearLayout</code> 那样把对应的宽或高设置为 <code>0dp</code>，另外该模式下 <code>bias</code> 是无效的。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app:layout_constraintVertical_weight=""</div><div class="line">app:layout_constraintHorizontal_weight=""</div></pre></td></tr></table></figure>
<p>相反的 <code>packed</code> 模式可以使用 <code>bias</code> 属性，但是 <code>weight</code> 无法使用。</p>
<h2 id="Guideline"><a href="#Guideline" class="headerlink" title="Guideline"></a>Guideline</h2><p>Guideline 可以横向可以纵向，它可以作为百分比的指标线，比如我们要求一张图片，它的宽高占有屏幕的<code>50%</code>。通常的做法会是重写 <code>ImageView</code> 的 <code>onMeasure</code> 方法。但是现在可以使用 <code>Guideline</code> 进行控制。</p>
<p>我们可以在 <code>IDE</code> 中右键 <code>Helper</code> 中创建纵向或者横向的 <code>Guideline</code>。</p>
<p><code>Guideline</code> 可以使用如下几个属性：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--方向--&gt;</span></div><div class="line">android:orientation="horizontal"</div><div class="line"><span class="comment">&lt;!--距开始位置或结尾位置多少距离--&gt;</span></div><div class="line">app:layout_constraintGuide_begin="20dp"</div><div class="line">app:layout_constraintGuide_end="20dp"</div><div class="line"><span class="comment">&lt;!-- 百分比范围 0~1 --&gt;</span></div><div class="line">app:layout_constraintGuide_percent="0.2"</div></pre></td></tr></table></figure>
<p><a href="https://developer.android.com/reference/android/support/percent/PercentRelativeLayout.html" target="_blank" rel="external">官方</a>也推荐使用 <code>Guideline</code> 设计来替代 <code>PercentLayout</code>。</p>
<p>一个居中宽度为屏幕 <code>70%</code> 和高度为屏幕 <code>70%</code> 的按钮。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#FAFFF0"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.fxx.arch.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.constraint.Guideline</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/left_guideline"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">app:layout_constraintGuide_percent</span>=<span class="string">".15"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.constraint.Guideline</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/right_guideline"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">app:layout_constraintGuide_percent</span>=<span class="string">".85"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.constraint.Guideline</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/top_guideline"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">app:layout_constraintGuide_percent</span>=<span class="string">".15"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.constraint.Guideline</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/bottom_guideline"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">app:layout_constraintGuide_percent</span>=<span class="string">".85"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/button"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Button"</span></div><div class="line">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"@+id/left_guideline"</span></div><div class="line">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"@+id/right_guideline"</span></div><div class="line">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"@+id/top_guideline"</span></div><div class="line">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"@+id/bottom_guideline"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Dimensions"><a href="#Dimensions" class="headerlink" title="Dimensions"></a>Dimensions</h2><p>该功能可以控制 <code>View</code> 宽高比。例如：海报图片比例（4：6），电影剧照（1.85：1），电视（16：9），没什么难理解的地方。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/layout_root"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#FAFFF0"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.fxx.arch.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.constraint.Guideline</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/gl_left"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">        <span class="attr">app:layout_constraintGuide_percent</span>=<span class="string">"0.25"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/img_avatar"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/foo"</span></div><div class="line"></div><div class="line">        <span class="attr">app:layout_constraintDimensionRatio</span>=<span class="string">"16:9"</span></div><div class="line">        <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">"@id/gl_left"</span></div><div class="line">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">android:contentDescription</span>=<span class="string">"@string/app_name"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://git.oschina.net/jocens/source/raw/master/constaint_layout_6.gif" alt=""></p>
<h2 id="Barriers（屏障）"><a href="#Barriers（屏障）" class="headerlink" title="Barriers（屏障）"></a>Barriers（屏障）</h2><p>和 <code>Guideline</code> 很像，但是 <code>Guideline</code> 是基于固定值或者百分比，不会自动根据屏障内的 <code>Views</code> 进行<strong>自动拓展</strong>屏障边界。</p>
<p>看一个常见的需求，如图：</p>
<p><img src="https://git.oschina.net/jocens/source/raw/master/constaint_layout_7.png" alt=""></p>
<p>那么如果 <code>txt_name</code> 这个用户名过长呢？如果用 <code>Guideline</code> 可以解决，限制宽度约束于 <code>Guideline</code> 范围内，但是这会造成空间的浪费。虽然使用 <code>Barriers</code>（屏障）可以很好动态解决这个问题，但是排版整齐也会出现问题。所以具体问题具体分析。</p>
<p>首先把需要界定为屏障的 <code>Views</code> 添加到 <code>Barrier</code>中，接着选择屏障的方向，<code>Barriers</code> 会根据模式生成边界，我们可以利用这个边界作为 <code>txt_content</code> 的约束参考。如上面的参考案例，我们可以如下操作：</p>
<ol>
<li>创建一个纵向的屏障</li>
<li>屏障内容是 <code>txt_name</code> 和 <code>txt_date</code></li>
<li>屏障的边界选择 <code>right</code>，即以 <code>Views</code> 中最宽的作为屏障的右边界</li>
</ol>
<p><img src="https://git.oschina.net/jocens/source/raw/master/constaint_layout_8.gif" alt=""></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/layout_root"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"#FAFFF0"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.fxx.arch.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.constraint.Barrier</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/barrier_left"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">app:barrierDirection</span>=<span class="string">"right"</span></div><div class="line">        <span class="attr">app:constraint_referenced_ids</span>=<span class="string">"txt_name,txt_date"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/txt_name"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_marginStart</span>=<span class="string">"16dp"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Averson1234567"</span></div><div class="line"></div><div class="line">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/txt_date"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"2017-01-01"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></div><div class="line"></div><div class="line">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@id/txt_name"</span></div><div class="line">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"@id/txt_name"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/txt_content"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line"></div><div class="line">        <span class="attr">android:maxLines</span>=<span class="string">"5"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"16sp"</span></div><div class="line">        <span class="attr">android:ellipsize</span>=<span class="string">"end"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"@string/content"</span></div><div class="line">        <span class="attr">android:lineSpacingExtra</span>=<span class="string">"3dp"</span></div><div class="line">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"16dp"</span></div><div class="line"></div><div class="line">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></div><div class="line">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"@id/txt_name"</span></div><div class="line">        <span class="attr">app:layout_constraintStart_toEndOf</span>=<span class="string">"@+id/barrier_left"</span></div><div class="line">        <span class="attr">android:layout_marginStart</span>=<span class="string">"8dp"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;约束布局是谷歌官方推荐使用的布局，它具有 &lt;code&gt;LinearLayout&lt;/code&gt;、&lt;code&gt;RelativeLayout&lt;/code&gt;、&lt;code&gt;PercentLayout&lt;/code&gt;等特性。通过一系列约束能减少布局嵌套，极大了减少开发者编写布局的成本。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>创建和销毁对象</title>
    <link href="http://yoursite.com/2017/07/04/effect-java-1/"/>
    <id>http://yoursite.com/2017/07/04/effect-java-1/</id>
    <published>2017-07-04T03:51:38.000Z</published>
    <updated>2017-07-23T04:02:51.631Z</updated>
    
    <content type="html"><![CDATA[<p>本文是 <code>Effect Java</code> 第二章内容阅读笔记，笔记内容主要为静态工厂替代构造方法的记录。</p>
<a id="more"></a>
<h2 id="对于对象的创建应该思考什么？"><a href="#对于对象的创建应该思考什么？" class="headerlink" title="对于对象的创建应该思考什么？"></a>对于对象的创建应该思考什么？</h2><p><code>Java</code> 中一个对象的创建入口是构造器。那么如何保证对象的创建入口简单，可读性好，方便上层抽象调用？</p>
<p>一个良好的建议便是<strong>静态工厂</strong>的方法。</p>
<h2 id="静态工厂"><a href="#静态工厂" class="headerlink" title="静态工厂"></a>静态工厂</h2><p>优势：</p>
<ul>
<li>静态工厂创建实例有合适的名称</li>
<li>不是每一次都需要创建一个新实例</li>
<li>返回的实例可以是子类型（TODO）</li>
</ul>
<p><strong>静态工厂创建实例有合适的名称</strong>的意思可以思考几个方面，开发者在创建一个实例的时候，通常需要什么准备，正常的情况一般是阅读 <code>API</code>，然后在一堆构造器参数中纠结。举个例子我们现在需要根据一个最小值和最大值生成一个区间对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Range</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> min, max;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Range</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span> max)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.min = min;</div><div class="line">        <span class="keyword">this</span>.max = max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看起来挺好理解，调用起来也不会太费劲。</p>
<p>那么现在如果我想只传入一个值。有默认的最小值和最大值，如何处理？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Range</span><span class="params">(<span class="keyword">int</span> min)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.min = min;</div><div class="line">    <span class="keyword">this</span>.max = DEFAULT_MAX;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Range</span><span class="params">(<span class="keyword">int</span> max)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.max = max;</div><div class="line">    <span class="keyword">this</span>.min = DEFAULT_MIN;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>显然上面的构造器实现是编译不通过的。那么不使用构造器如何处理？可能会想到用 <code>Setter</code> 方式处理。但是你却不能保证上层调用一定会 <code>set</code>。而且这样重复的创建实例再 <code>set</code> 缺乏优雅性。</p>
<p>这样静态工厂的优势体现出来了，<strong>避开构造器相同签名的限制</strong>，<strong>有合适的名称作为入口</strong>提供给上层调用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Range</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_MIN = Integer.MIN_VALUE;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_MAX = Integer.MAX_VALUE;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> min, max;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Range</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span> max)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.min = min;</div><div class="line">        <span class="keyword">this</span>.max = max;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> Range <span class="title">between</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span> max)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Range(min, max);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> Range <span class="title">lessThan</span><span class="params">(<span class="keyword">int</span> max)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Range(DEFAULT_MIN, max);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> Range <span class="title">greaterThan</span><span class="params">(<span class="keyword">int</span> min)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Range(min, DEFAULT_MAX);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>显然这样创建一个范围既能满足需求又避免了构造器的不足，且可读性得到提高。该实现在 <code>guava</code> 中也有体现，参考 <code>guava</code> 的 <a href="https://github.com/google/guava/wiki/RangesExplained#operations" target="_blank" rel="external">Range</a></p>
<p><strong>不是每一次都需要创建一个新实例</strong>最典型的体现就是 <code>Integer</code> 类。在 <code>Integer</code> 内部中缓存了常用的 <code>Integer</code> 对象，从而提升性能，不需要每次都创建一个 <code>Integer</code> 实例。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Integer</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</div><div class="line"></div><div class="line">        <span class="keyword">static</span> &#123;</div><div class="line">            <span class="keyword">int</span> h = <span class="number">127</span>;</div><div class="line">            String integerCacheHighPropValue =</div><div class="line">                sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</div><div class="line">            <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</div><div class="line">                    i = Math.max(i, <span class="number">127</span>);</div><div class="line">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</div><div class="line">                &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            high = h;</div><div class="line"></div><div class="line">            cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</div><div class="line">            <span class="keyword">int</span> j = low;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</div><div class="line">                cache[k] = <span class="keyword">new</span> Integer(j++);</div><div class="line"></div><div class="line">            <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></div><div class="line">            <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</div><div class="line">            <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在调用 <code>valueOf(int)</code> 方法将一个 <code>int</code> 转换成一个 <code>Integer</code> 过程中如果是常用值，马上从缓存中取出返回，从而提高性能。</p>
<p><strong>返回的实例可以是子类型</strong>除了有多态的好处还有效解耦了调用方和对象创建的过程，在静态工厂内部还能合理返回内部实现好的标准实例和隐藏这些实现细节，减少调用者的使用成本，并且可以在不影响调用者使用的情况下，对版本进行迭代升级。</p>
<p>如 <code>EnumSet</code> 的做法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    EnumSet.allOf(GENDER.class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">enum</span> GENDER &#123;</div><div class="line">    MALE, FEMALE</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们想列出枚举的所有内容，我们通过 <code>EnumSet.allOf(GENDER.class)</code> 的调用可以获取，首先 <code>EnumSet</code> 不需要我们负责创建，并且在内部实际会根据枚举内容的多少进行优化，随后在将来版本更新的时候，如果这种优化无用我们可以移除，这对我们上述的使用代码并没有一点影响。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (universe.length &lt;= <span class="number">64</span>)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RegularEnumSet&lt;&gt;(elementType, universe);</div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JumboEnumSet&lt;&gt;(elementType, universe);</div></pre></td></tr></table></figure>
<p>静态工厂的缺点：</p>
<ul>
<li>不能子类化</li>
<li>和其他静态方法一样，没有特别明显的区分</li>
</ul>
<p><strong>不能子类化</strong>实际上不算坏处，使用组合会比使用继承好的多，拓展性和灵活性更高。</p>
<p><strong>没有特别明显的区分</strong>是因为和普通的静态方法一样，调用者未必知道他是用来创建对象的方法，可能就是普通的函数，毕竟静态工厂不像构造器又强制性约束。但是我们可以用一些名称弥补。</p>
<ul>
<li><code>of</code>、<code>valueOf</code>： 返回的实例与参数的值相同</li>
<li><code>getInstance</code>： 获取该类实例，但是可以是同一个实例。</li>
<li><code>newInstance</code>： 获取该类实例，每一个实例都是不一样的。</li>
<li><code>getType</code>： 返回非该类实例，但是可以是同一个实例。</li>
<li><code>newType</code>： 返回非该类实例，每一个实例都是不一样的。</li>
</ul>
<h2 id="参数过多，考虑-Builder"><a href="#参数过多，考虑-Builder" class="headerlink" title="参数过多，考虑 Builder"></a>参数过多，考虑 Builder</h2><p>当一个对象所需要的参数是多的情况下，应考虑使用 <code>Builder</code> 来创建实例。</p>
<p>这一节在《代码整洁之道》第三章也有很好的描述。</p>
<p>重载构造器，随着参数的不断增加，会变得不可控，而且参数类型相同的情况下很难保证顺序上层是否调用正确。</p>
<p>对于 <code>setter</code> 方式则分散重载构造器的压力到各个 <code>set</code> 方法中，虽然可读性提高，但是由于 <code>set</code> 方法可以改变其属性，造成实例对象不是非可变的，致使这在多线程中是不安全的。</p>
<p><code>Builder</code> 模式则拥有重载构造器那样的安全性和 <code>JavaBean</code> 那样的良好可读性。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> carbohydrate;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(Builder builder)</span> </span>&#123;</div><div class="line">        servings = builder.servings;</div><div class="line">        servingSize = builder.servingSize;</div><div class="line">        fat = builder.fat;</div><div class="line">        sodium = builder.sodium;</div><div class="line">        calories = builder.calories;</div><div class="line">        carbohydrate = builder.carbohydrate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> fat = <span class="number">0</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> sodium = <span class="number">0</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> calories = <span class="number">0</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> carbohydrate = <span class="number">0</span>;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> servings, <span class="keyword">int</span> servingSize)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.servings = servings;</div><div class="line">            <span class="keyword">this</span>.servingSize = servingSize;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">fat</span><span class="params">(<span class="keyword">int</span> fat)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.fat = fat;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sodium</span><span class="params">(<span class="keyword">int</span> sodium)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.sodium = sodium;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">calories</span><span class="params">(<span class="keyword">int</span> calories)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.calories = calories;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">carbohydrate</span><span class="params">(<span class="keyword">int</span> carbohydrate)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.carbohydrate = carbohydrate;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> NutritionFacts <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NutritionFacts(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如此构建出来的 <code>NutritionFacts</code> 是不可变的，且可读性良好。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> NutritionFacts.Builder(<span class="number">240</span>, <span class="number">8</span>)</div><div class="line">	.sodium(<span class="number">35</span>)</div><div class="line">	.calories(<span class="number">100</span>)</div><div class="line">	.carbohydrate(<span class="number">27</span>)</div><div class="line">	.build();</div></pre></td></tr></table></figure>
<h2 id="避免创建不必要的对象"><a href="#避免创建不必要的对象" class="headerlink" title="避免创建不必要的对象"></a>避免创建不必要的对象</h2><ul>
<li>基础类型优于包装类型</li>
<li>如果对象的存在允许不可变，它始终能被重用</li>
</ul>
<h2 id="消除过期引用（TODO）"><a href="#消除过期引用（TODO）" class="headerlink" title="消除过期引用（TODO）"></a>消除过期引用（TODO）</h2><ul>
<li>消除对象引用最好的方法是：让包含该引用的变量结束其生命周期。（45条）</li>
</ul>
<p>参考 <code>Glide</code>：</p>
<ul>
<li><a href="https://github.com/bumptech/glide/blob/master/library/src/main/java/com/bumptech/glide/manager/ActivityFragmentLifecycle.java" target="_blank" rel="external">ActivityFragmentLifecycle.lifecycleListeners</a></li>
<li><a href="https://github.com/sjudd/DiskLruCache/blob/master/src/main/java/com/bumptech/glide/disklrucache/DiskLruCache.java" target="_blank" rel="external">DiskLruCache.lruEntries</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是 &lt;code&gt;Effect Java&lt;/code&gt; 第二章内容阅读笔记，笔记内容主要为静态工厂替代构造方法的记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>基于 JWT 的 RESTful 授权简单实现</title>
    <link href="http://yoursite.com/2017/07/02/spring-boot-security-jwt/"/>
    <id>http://yoursite.com/2017/07/02/spring-boot-security-jwt/</id>
    <published>2017-07-02T06:55:55.000Z</published>
    <updated>2017-07-17T03:52:21.743Z</updated>
    
    <content type="html"><![CDATA[<p>本文起因是写 <code>Android</code> 程序时后端多数采用基于 <code>Token</code> 的 <code>RESTful</code> 风格 API。本着学习的态度本地简单实现一下。</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于 <code>RESTful</code> 概念的通俗理解可以参考该<a href="https://www.zhihu.com/question/28557115" target="_blank" rel="external">知乎链接</a>。</p>
<p><strong>使用技术</strong></p>
<ul>
<li>JWT（JSON Web Token）</li>
<li>spring boot</li>
<li>spring-boot-starter-security</li>
<li>spring-boot-starter-data-mongodb</li>
</ul>
<p>实现的基本流程如图：</p>
<p><img src="http://git.oschina.net/jocens/source/raw/master/spring-security-1.png" alt=""></p>
<h2 id="后台实现"><a href="#后台实现" class="headerlink" title="后台实现"></a>后台实现</h2><p>后台基于 <code>Gradle</code> 进行构建，读者也可以自行选择 <code>Maven</code> 构建。</p>
<p><strong>build.gradle</strong></p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">buildscript</span> &#123;</div><div class="line">    ext &#123;</div><div class="line">        springBootVersion = <span class="string">'1.5.4.RELEASE'</span></div><div class="line">		jwtVersion = <span class="string">'0.7.0'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">	<span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-data-mongodb'</span>)</div><div class="line">	<span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-jersey'</span>)</div><div class="line">	<span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-security'</span>)</div><div class="line">	<span class="keyword">compile</span>(<span class="string">"io.jsonwebtoken:jjwt:$&#123;jwtVersion&#125;"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>理解一下 <code>Spring Security</code> 处理机制。</p>
<p>首先了解一下涉及到的接口和类：</p>
<ul>
<li><code>UserDetails</code>（Spring Security 中的用户信息规范）</li>
<li><code>UserDetailsService</code>（依旧自身业务逻辑提供给 Spring Security 一个用户信息规范）</li>
<li><code>WebSecurityConfigurerAdapter</code>（安全配置）</li>
<li><code>AuthenticationEntryPoint</code>（授权失败处理）</li>
<li><code>Authentication</code>（包含授权信息的领域模型）</li>
<li><code>SecurityContextHolder</code> （存放当前应用程序的当前安全上下文中的细节）</li>
</ul>
<p><strong>持久层</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span> <span class="keyword">private</span> String id;</div><div class="line"></div><div class="line">    <span class="meta">@Indexed</span>(unique = <span class="keyword">true</span>, direction = IndexDirection.DESCENDING, dropDups = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String email;</div><div class="line">    <span class="keyword">private</span> String firstName;</div><div class="line">    <span class="keyword">private</span> String lastName;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Date lastPasswordResetDate;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Authority&gt; authorities;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Authority</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String role;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Login</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">User</span>, <span class="title">String</span>&gt; </span>&#123;</div><div class="line">    <span class="function">User <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>授权功能</strong></p>
<p>首先实现基于 <code>JWT</code> 的 <code>Spring Security</code> 用户信息规范。</p>
<p>规范中必须提供的属性：</p>
<ul>
<li>用户名</li>
<li>密码</li>
<li>权限集</li>
<li>帐号过期与否</li>
<li>锁定与否</li>
<li>凭证过期与否</li>
<li>是否有效</li>
</ul>
<p>非必要提供的属性：</p>
<ul>
<li>重置密码时间（用来提检查 <code>JWT</code> 是否过期等）</li>
</ul>
<p>这些属性的用处体现在 <code>AbstractUserDetailsAuthenticationProvider.DefaultPreAuthenticationChecks#check</code> 方法中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUser</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String username;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String password;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Date lastPasswordResetDate;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Collection&lt;? extends GrantedAuthority&gt; authorities;</div><div class="line"></div><div class="line"></div><div class="line">    JwtUser(String username, String password, Collection&lt;? extends GrantedAuthority&gt; authorities, Date lastPasswordResetDate) &#123;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">        <span class="keyword">this</span>.authorities = authorities;</div><div class="line">        <span class="keyword">this</span>.lastPasswordResetDate = lastPasswordResetDate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</div><div class="line">        <span class="keyword">return</span> authorities;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getLastPasswordResetDate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> lastPasswordResetDate;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来根据自身的业务逻辑实现 <code>UserDetailsService</code> 并提供 <code>UserDetails</code> 给 <code>Spring Security</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserRepository userRepository;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JwtUserDetailsService</span><span class="params">(UserRepository userRepository)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userRepository = userRepository;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</div><div class="line">        User user = userRepository.findByUsername(username);</div><div class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"can not found user for"</span> + username);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> JwtUserFactory.create(user);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JwtUserFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">JwtUserFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> JwtUser <span class="title">create</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtUser(</div><div class="line">            user.getUsername(),</div><div class="line">            user.getPassword(),</div><div class="line">            mapToGrantedAuthorities(user.getAuthorities()),</div><div class="line">            user.getLastPasswordResetDate()</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;GrantedAuthority&gt; <span class="title">mapToGrantedAuthorities</span><span class="params">(List&lt;Authority&gt; authorities)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> authorities.stream()</div><div class="line">            .map(Authority::getRole)</div><div class="line">            .map(SimpleGrantedAuthority::<span class="keyword">new</span>)</div><div class="line">            .collect(Collectors.toList());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来就是 <code>JWT</code> 的生成和验证，下面代码比较简单。具体更完整的实现参考<a href="https://github.com/szerhusenBC/jwt-spring-security-demo/blob/master/src/main/java/org/zerhusen/security/JwtTokenUtil.java" target="_blank" rel="external">该链接</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">public class JwtTokenUtil &#123;</div><div class="line"></div><div class="line">    private static final String CLAIM_KEY_CREATED = &quot;created&quot;;</div><div class="line"></div><div class="line">    @Value(&quot;$&#123;jwt.secret&#125;&quot;)</div><div class="line">    private String secret;</div><div class="line"></div><div class="line">    @Value(&quot;$&#123;jwt.expiration&#125;&quot;)</div><div class="line">    private Long expiration;</div><div class="line"></div><div class="line"></div><div class="line">    public boolean validateToken(String token, UserDetails userDetails) &#123;</div><div class="line">        JwtUser user = (JwtUser) userDetails;</div><div class="line">        final String username = parseUsernameFromToken(token);</div><div class="line">        final Date created = parseCreatedDateFromToken(token);</div><div class="line">        return (username.equals(user.getUsername())</div><div class="line">            &amp;&amp; !isTokenExpired(token)</div><div class="line">            &amp;&amp; !isCreatedBeforeLastPasswordReset(created, user.getLastPasswordResetDate()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public String generateToken(UserDetails userDetails) &#123;</div><div class="line">        JwtBuilder builder = Jwts.builder();</div><div class="line"></div><div class="line">        builder</div><div class="line">            // claim (payload)</div><div class="line">            .claim(CLAIM_KEY_CREATED, new Date())</div><div class="line">            .setSubject(userDetails.getUsername())</div><div class="line">            .setExpiration(generateExpirationDate())</div><div class="line">            // header signature algorithm and secret</div><div class="line">            .signWith(SignatureAlgorithm.HS512, secret);</div><div class="line"></div><div class="line">        return builder.compact();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public String parseUsernameFromToken(String token) &#123;</div><div class="line">        final Claims claims = parseClaimsFromToken(token);</div><div class="line">        return claims.getSubject();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public boolean canTokenBeRefreshed(String token, Date lastPasswordResetDate) &#123;</div><div class="line">        final Date created = parseCreatedDateFromToken(token);</div><div class="line">        return !isCreatedBeforeLastPasswordReset(created, lastPasswordResetDate) &amp;&amp;</div><div class="line">            !isTokenExpired(token);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public String refreshToken(String token) &#123;</div><div class="line">        Claims claims = parseClaimsFromToken(token);</div><div class="line">        claims.put(CLAIM_KEY_CREATED, new Date());</div><div class="line">        return generateToken(claims);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private boolean isTokenExpired(String token) &#123;</div><div class="line">        final Date expiration = parseExpirationDateFromToken(token);</div><div class="line">        return expiration.before(new Date());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private String generateToken(Claims claims) &#123;</div><div class="line">        return Jwts.builder()</div><div class="line">            .setClaims(claims)</div><div class="line">            .setExpiration(generateExpirationDate())</div><div class="line">            .signWith(SignatureAlgorithm.HS512, secret)</div><div class="line">            .compact();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private boolean isCreatedBeforeLastPasswordReset(Date created, Date lastPasswordRest) &#123;</div><div class="line">        return lastPasswordRest != null &amp;&amp; created.before(lastPasswordRest);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private Date parseExpirationDateFromToken(String token) &#123;</div><div class="line">        final Claims claims = parseClaimsFromToken(token);</div><div class="line">        return claims.getExpiration();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private Date parseCreatedDateFromToken(String token) &#123;</div><div class="line">        final Claims claims = parseClaimsFromToken(token);</div><div class="line">        return new Date((Long) claims.get(CLAIM_KEY_CREATED));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private Claims parseClaimsFromToken(String token) &#123;</div><div class="line">        return Jwts.parser()</div><div class="line">            .setSigningKey(secret)</div><div class="line">            .parseClaimsJws(token)</div><div class="line">            .getBody();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private Date generateExpirationDate() &#123;</div><div class="line">        return new Date(System.currentTimeMillis() + expiration * 1000);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后实现一下我们的过滤链，继承抽象类 <code>OncePerRequestFilter</code> 实现内部过滤，目的是当请求的 <code>Token</code> 有效时路由到指定的资源控制器，否则做授权异常处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">public class JwtAuthenticationTokenFilter extends OncePerRequestFilter &#123;</div><div class="line"></div><div class="line">    @Autowired UserDetailsService userDetailsService;</div><div class="line"></div><div class="line">    @Autowired JwtTokenUtil jwtTokenUtil;</div><div class="line"></div><div class="line">    @Value(&quot;$&#123;jwt.header&#125;&quot;) String tokenHeader;</div><div class="line"></div><div class="line">    @Value(&quot;$&#123;jwt.tokenPrefix&#125;&quot;) String tokenPrefix;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</div><div class="line">        throws ServletException, IOException &#123;</div><div class="line">        String authenticationHeader = request.getHeader(tokenHeader);</div><div class="line"></div><div class="line">        if (checkTokenHeader(authenticationHeader)) &#123;</div><div class="line"></div><div class="line">            final String token = getTokenFromHeader(authenticationHeader);</div><div class="line">            final String username = jwtTokenUtil.getUsernameFromToken(token);</div><div class="line"></div><div class="line">            if (!checkAuthorized(username)) &#123;</div><div class="line">                UserDetails userDetails = userDetailsService.loadUserByUsername(username);</div><div class="line"></div><div class="line">                if (jwtTokenUtil.validateToken(token, userDetails)) &#123;</div><div class="line">                    UsernamePasswordAuthenticationToken authenticationToken</div><div class="line">                        = new UsernamePasswordAuthenticationToken(userDetails, null,</div><div class="line">                        userDetails.getAuthorities());</div><div class="line">                    // AuthenticationDetailsSource 登录过程中对用户的登录信息的详细信息进行填充</div><div class="line">                    authenticationToken.setDetails(</div><div class="line">                        new WebAuthenticationDetailsSource().buildDetails(request));</div><div class="line">                    SecurityContextHolder.getContext().setAuthentication(authenticationToken);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        filterChain.doFilter(request, response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private boolean checkTokenHeader(String authenticationHeader) &#123;</div><div class="line">        return authenticationHeader != null &amp;&amp; authenticationHeader.startsWith(tokenPrefix);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private boolean checkAuthorized(String username) &#123;</div><div class="line">        return username != null &amp;&amp; SecurityContextHolder.getContext().getAuthentication() != null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private String getTokenFromHeader(String authenticationHeader) &#123;</div><div class="line">        return authenticationHeader.substring(tokenPrefix.length());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>授权异常处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthenticationEntryPoint</span> <span class="keyword">implements</span> <span class="title">AuthenticationEntryPoint</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span></span></div><div class="line">        <span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line">        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>核心的代码基本实现，剩余的 <code>Web</code> 层代码和配置代码比较简单，参考该<a href="https://github.com/szerhusenBC/jwt-spring-security-demo" target="_blank" rel="external">项目</a>。</p>
<h2 id="源码机制简单分析"><a href="#源码机制简单分析" class="headerlink" title="源码机制简单分析"></a>源码机制简单分析</h2><p>首先看授权部分，这是一个基本的发起授权请求的处理流程。</p>
<p><img src="http://git.oschina.net/jocens/source/raw/master/spring-security-2.png" alt=""></p>
<p>由于是授权请求，我们最后实际走的核心代码是授权功能的逻辑代码（AuthServiceImpl）。</p>
<p>而再 <code>AuthServiceImpl</code> 我们使用到了</p>
<ul>
<li><code>JwtTokenUtil</code></li>
<li><code>UserRepository</code></li>
<li><code>UserDetailsService</code></li>
<li><code>AuthenticationManager</code></li>
</ul>
<p>先看一下流程图，再分析源码。</p>
<p><img src="http://git.oschina.net/jocens/source/raw/master/spring-security-3.png" alt=""></p>
<p>基于上图，实际上我们使用到的实现了 <code>AuthenticationManager</code> 接口的 <code>ProviderManager</code>。我们调用 <code>ProviderManager#authenticate</code> 方法，并且传入一个基于用户名和密码的授权信息（UsernamePasswordAuthenticationToken），进而执行验证。</p>
<p>但是细心看 <code>AuthenticationManager</code> 内部中真正执行授权的任务委托给了 <code>AuthenticationProvider</code> 接口的实现<code>DaoAuthenticationProvider</code>，<code>DaoAuthenticationProvider</code> 继承自 <code>AbstractUserDetailsAuthenticationProvider</code> 抽象类。</p>
<p>我们看一下</p>
<p><code>ProviderManager.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 简化代码</span></div><div class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></div><div class="line">		<span class="keyword">throws</span> AuthenticationException &#123;</div><div class="line"></div><div class="line">	<span class="comment">// 检索授权委托者, 即 AbstractUserDetailsAuthenticationProvider 的子类 DaoAuthenticationProvider</span></div><div class="line">	<span class="keyword">for</span> (AuthenticationProvider provider : getProviders()) &#123;</div><div class="line">		<span class="keyword">if</span> (!provider.supports(toTest)) &#123;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			result = provider.authenticate(authentication);</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</div><div class="line">				copyDetails(authentication, result);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="keyword">throw</span> e;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>AbstractUserDetailsAuthenticationProvider.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 简化代码</span></div><div class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></div><div class="line">			<span class="keyword">throws</span> AuthenticationException &#123;</div><div class="line">	String username = (authentication.getPrincipal() == <span class="keyword">null</span>) ? <span class="string">"NONE_PROVIDED"</span></div><div class="line">			: authentication.getName();</div><div class="line"></div><div class="line">	<span class="keyword">boolean</span> cacheWasUsed = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">	<span class="comment">// 缓存中是否有授权用户，显然没有</span></div><div class="line">	UserDetails user = <span class="keyword">this</span>.userCache.getUserFromCache(username); </div><div class="line"></div><div class="line">	<span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</div><div class="line">		cacheWasUsed = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// DaoAuthenticationProvider 执行实际检索，这里检索使用到了我们实现的 `JwtUserDetailsService`。 </span></div><div class="line">			user = retrieveUser(username,</div><div class="line">					(UsernamePasswordAuthenticationToken) authentication);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (UsernameNotFoundException notFound) &#123;</div><div class="line">			<span class="keyword">throw</span> notFound;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">// 检查 UserDetials 是否过期、锁定等等</span></div><div class="line">		preAuthenticationChecks.check(user);</div><div class="line">		<span class="comment">// 检查密码是否正确</span></div><div class="line">		additionalAuthenticationChecks(user,</div><div class="line">				(UsernamePasswordAuthenticationToken) authentication);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (AuthenticationException exception) &#123;</div><div class="line">		<span class="keyword">throw</span> exception;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 成功返回授权信息 UsernamePasswordAuthenticationToken。</span></div><div class="line">	<span class="keyword">return</span> createSuccessAuthentication(principalToReturn, authentication, user);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到此为止授权成功，接着我们根据凭证（UsernamePasswordAuthenticationToken）中的 <code>username</code> 查找指定的 <code>User</code> 并生成 <code>JWT</code> 进行颁发。</p>
<p>下图是请求其他资源并携带 <code>Token</code> 的流程如下。通过过滤的时进行判断是否授权，接着路由到指定的 <code>Controller</code>。</p>
<p><img src="http://git.oschina.net/jocens/source/raw/master/spring-security-4.png" alt=""></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://github.com/szerhusenBC/jwt-spring-security-demo" target="_blank" rel="external">代码参考</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文起因是写 &lt;code&gt;Android&lt;/code&gt; 程序时后端多数采用基于 &lt;code&gt;Token&lt;/code&gt; 的 &lt;code&gt;RESTful&lt;/code&gt; 风格 API。本着学习的态度本地简单实现一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JWT 摘要</title>
    <link href="http://yoursite.com/2017/07/01/jwt/"/>
    <id>http://yoursite.com/2017/07/01/jwt/</id>
    <published>2017-07-01T06:41:28.000Z</published>
    <updated>2017-07-11T07:11:30.517Z</updated>
    
    <content type="html"><![CDATA[<p>本文是 <code>JWT</code> （JSON Web Token） 一些记录。</p>
<a id="more"></a>
<h2 id="JWT-组成"><a href="#JWT-组成" class="headerlink" title="JWT 组成"></a>JWT 组成</h2><p><strong>Claims（Payload）</strong></p>
<p>负载部分(实际数据)。可以包含自定义的字段属性。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"iss"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"iat"</span>: <span class="number">1499756713070</span>,</div><div class="line">    <span class="attr">"exp"</span>: <span class="number">1499756713070</span>,</div><div class="line">    <span class="attr">"aud"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"sub"</span>: <span class="string">""</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>iss</code> 是 JWT 签发者（Issuer）</li>
<li><code>iat</code> 是签发时间（Issued At）</li>
<li><code>exp</code> 是过期时间（Expiration）</li>
<li><code>aud</code> 是接收者（Audience）</li>
<li><code>sub</code> 是主题（Subject）</li>
</ul>
<p>上述的 <code>JSON</code> 进行 <code>Base64</code> 编码得到的结果，称为 <code>JWT</code> 的 <code>Payload</code> 部分。</p>
<blockquote>
<p>Base64 只是一种编码，是可逆转翻译的。</p>
</blockquote>
<p><strong>头部（Header）</strong></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"typ"</span>: <span class="string">"JWT"</span>,</div><div class="line">  <span class="attr">"alg"</span>: <span class="string">"HS256"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>typ</code> 是 <code>JWT</code> 类型，可以忽略</li>
<li><code>alg</code> 是 <code>JWT</code> 用的签名算法</li>
</ul>
<p>依旧是 <code>Base64</code> 进行编码。</p>
<p><strong>签名（Signature）</strong></p>
<p>将上述的 <code>Payload</code> 和 <code>Header</code> 各自的 <code>Base64</code> 字符串使用 <code>.</code> 拼接后再进行 <code>HS256</code> 进行加密，这个加密的过程还需要提供一个 <code>secret</code>。最后形成签名部分。</p>
<p>最后将这三个部分使用 <code>.</code> 进行拼接，形成完整的 <code>JWT</code>。</p>
<h2 id="签名的目的"><a href="#签名的目的" class="headerlink" title="签名的目的"></a>签名的目的</h2><p>签名的目的是确保不一样的输入产生不一样的输出。<code>Payload</code> 篡改后即使 <code>Header</code> 一样，签名也会不一样。这样服务器根据接收 <code>Payload</code> 和 <code>Header</code> 进行再签名然后对比接收的签名，结果不一致的话返回 <code>Unauthorized（401）</code> 的响应。</p>
<h3 id="信息会暴露？"><a href="#信息会暴露？" class="headerlink" title="信息会暴露？"></a>信息会暴露？</h3><p>会暴露，所以我们进行 <code>JWT</code> 传输应该避免放入敏感信息（比如：密码）。这样就算被恶意截取信息进行 <code>Base64</code> 解码，也没什么关系。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Gradle：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile(&quot;io.jsonwebtoken:jjwt:0.7.0&quot;)</div></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSampleToken</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    User user = <span class="keyword">new</span> User();</div><div class="line">    user.setPassword(<span class="string">"pass"</span>);</div><div class="line">    user.setUsername(<span class="string">"username"</span>);</div><div class="line">    user.setLastPasswordResetDate(<span class="keyword">new</span> Date());</div><div class="line">    user.setEmail(<span class="string">"username@email.com"</span>);</div><div class="line"></div><div class="line">    String mockSecret = <span class="string">"ssl-secret"</span>;</div><div class="line"></div><div class="line">    String token = Jwts.builder()</div><div class="line">        .setIssuedAt(<span class="keyword">new</span> Date())</div><div class="line">        .setExpiration(<span class="keyword">new</span> Date(System.currentTimeMillis() + <span class="number">604800</span> * <span class="number">1000</span>))</div><div class="line">        .setSubject(user.getUsername())</div><div class="line">        .signWith(SignatureAlgorithm.HS512, mockSecret)</div><div class="line">        .compact();</div><div class="line">    System.out.println(token);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extraUsernameFromToken</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    String token</div><div class="line">        = <span class="string">"eyJhbGciOiJIUzUxMiJ9.eyJpYXQiOjE0OTk3NTExMDAsImV4cCI6MTUwMDM1NTkwMCwic3ViIjoidXNlcm5hbWUifQ.l34epQKUnPfuPAigtRuf03_6uFpWjCs0ONDiqJXSqD_rx32NUyA9EYzS1p9v5z0a6E6DwUJlt9MQN_y3Gnn_BQ"</span>;</div><div class="line">    String mockSecret = <span class="string">"ssl-secret"</span>;</div><div class="line">    Claims claims = Jwts.parser()</div><div class="line">        .setSigningKey(mockSecret)</div><div class="line">        .parseClaimsJws(token)</div><div class="line">        .getBody();</div><div class="line">    String username = claims.getSubject();</div><div class="line">    Assert.assertEquals(<span class="string">"username"</span>, username);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><a href="https://jwt.io/introduction/" target="_blank" rel="external">介绍视频</a></li>
<li><a href="http://blog.leapoahead.com/2015/09/07/user-authentication-with-jwt/" target="_blank" rel="external">八幅漫画理解使用 JSON Web Token 设计单点登录系统</a></li>
<li><a href="https://jwt.io/#debugger" target="_blank" rel="external">在线测试工具</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%9C%89%E6%95%88%E8%B4%9F%E8%BD%BD" target="_blank" rel="external">有效负载</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是 &lt;code&gt;JWT&lt;/code&gt; （JSON Web Token） 一些记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Averson</title>
    <link href="http://yoursite.com/2017/06/06/hello-world/"/>
    <id>http://yoursite.com/2017/06/06/hello-world/</id>
    <published>2017-06-06T08:16:16.000Z</published>
    <updated>2017-07-13T07:25:16.303Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<blockquote>
<p>平凡的程序员！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;平凡的程序员！&lt;/p&gt;
&lt;/blockquote&gt;

    
    </summary>
    
    
      <category term="个人" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
</feed>
