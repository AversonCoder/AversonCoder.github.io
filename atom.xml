<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Averson</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-17T03:59:30.520Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Averson</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>创建和销毁对象</title>
    <link href="http://yoursite.com/2017/07/04/effect-java-1/"/>
    <id>http://yoursite.com/2017/07/04/effect-java-1/</id>
    <published>2017-07-04T03:51:38.000Z</published>
    <updated>2017-07-17T03:59:30.520Z</updated>
    
    <content type="html"><![CDATA[<p>本文是 <code>Effect Java</code> 第二章内容阅读笔记，笔记内容主要为静态工厂替代构造方法的记录。</p>
<a id="more"></a>
<h2 id="对于对象的创建应该思考什么？"><a href="#对于对象的创建应该思考什么？" class="headerlink" title="对于对象的创建应该思考什么？"></a>对于对象的创建应该思考什么？</h2><p><code>Java</code> 中一个对象的创建入口是构造器。那么如何保证对象的创建入口简单，可读性好，方便上层抽象调用？</p>
<p>一个良好的建议便是<strong>静态工厂</strong>的方法。</p>
<h2 id="静态工厂"><a href="#静态工厂" class="headerlink" title="静态工厂"></a>静态工厂</h2><p>优势：</p>
<ul>
<li>静态工厂创建实例有合适的名称</li>
<li>不是每一次都需要创建一个新实例</li>
<li>返回的实例可以是子类型（TODO）</li>
</ul>
<p><strong>静态工厂创建实例有合适的名称</strong>的意思可以思考几个方面，开发者在创建一个实例的时候，通常需要什么准备，正常的情况一般是阅读 <code>API</code>，然后在一堆构造器参数中纠结。举个例子我们现在需要根据一个最小值和最大值生成一个区间对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Range</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> min, max;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Range</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span> max)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.min = min;</div><div class="line">        <span class="keyword">this</span>.max = max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看起来挺好理解，调用起来也不会太费劲。</p>
<p>那么现在如果我想只传入一个值。有默认的最小值和最大值，如何处理？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Range</span><span class="params">(<span class="keyword">int</span> min)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.min = min;</div><div class="line">    <span class="keyword">this</span>.max = DEFAULT_MAX;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Range</span><span class="params">(<span class="keyword">int</span> max)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.max = max;</div><div class="line">    <span class="keyword">this</span>.min = DEFAULT_MIN;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>显然上面的构造器实现是编译不通过的。那么不使用构造器如何处理？可能会想到用 <code>Setter</code> 方式处理。但是你却不能保证上层调用一定会 <code>set</code>。而且这样重复的创建实例再 <code>set</code> 缺乏优雅性。</p>
<p>这样静态工厂的优势体现出来了，<strong>避开构造器相同签名的限制</strong>，<strong>有合适的名称作为入口</strong>提供给上层调用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Range</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_MIN = Integer.MIN_VALUE;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_MAX = Integer.MAX_VALUE;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> min, max;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Range</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span> max)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.min = min;</div><div class="line">        <span class="keyword">this</span>.max = max;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> Range <span class="title">between</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span> max)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Range(min, max);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> Range <span class="title">lessThan</span><span class="params">(<span class="keyword">int</span> max)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Range(DEFAULT_MIN, max);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> Range <span class="title">greaterThan</span><span class="params">(<span class="keyword">int</span> min)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Range(min, DEFAULT_MAX);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>显然这样创建一个范围既能满足需求又避免了构造器的不足，且可读性得到提高。</p>
<p><strong>不是每一次都需要创建一个新实例</strong>最典型的体现就是 <code>Integer</code> 类。在 <code>Integer</code> 内部中缓存了常用的 <code>Integer</code> 对象，从而提升性能，不需要每次都创建一个 <code>Integer</code> 实例。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Integer</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</div><div class="line"></div><div class="line">        <span class="keyword">static</span> &#123;</div><div class="line">            <span class="keyword">int</span> h = <span class="number">127</span>;</div><div class="line">            String integerCacheHighPropValue =</div><div class="line">                sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</div><div class="line">            <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</div><div class="line">                    i = Math.max(i, <span class="number">127</span>);</div><div class="line">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</div><div class="line">                &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            high = h;</div><div class="line"></div><div class="line">            cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</div><div class="line">            <span class="keyword">int</span> j = low;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</div><div class="line">                cache[k] = <span class="keyword">new</span> Integer(j++);</div><div class="line"></div><div class="line">            <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></div><div class="line">            <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</div><div class="line">            <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在调用 <code>valueOf(int)</code> 方法将一个 <code>int</code> 转换成一个 <code>Integer</code> 过程中如果是常用值，马上从缓存中取出返回，从而提高性能。</p>
<p><strong>返回的实例可以是子类型</strong>除了有多态的好处还有效解耦了调用方和对象创建的过程，在静态工厂内部还能合理返回内部实现好的标准实例和隐藏这些实现细节，减少调用者的使用成本，并且可以在不影响调用者使用的情况下，对版本进行迭代升级。</p>
<p>如 <code>EnumSet</code> 的做法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    EnumSet.allOf(GENDER.class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">enum</span> GENDER &#123;</div><div class="line">    MALE, FEMALE</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们想列出枚举的所有内容，我们通过 <code>EnumSet.allOf(GENDER.class)</code> 的调用可以获取，首先 <code>EnumSet</code> 不需要我们负责创建，并且在内部实际会根据枚举内容的多少进行优化，随后在将来版本更新的时候，如果这种优化无用我们可以移除，这对我们上述的使用代码并没有一点影响。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (universe.length &lt;= <span class="number">64</span>)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RegularEnumSet&lt;&gt;(elementType, universe);</div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JumboEnumSet&lt;&gt;(elementType, universe);</div></pre></td></tr></table></figure>
<p>静态工厂的缺点：</p>
<ul>
<li>不能子类化</li>
<li>和其他静态方法一样，没有特别明显的区分</li>
</ul>
<p><strong>不能子类化</strong>实际上不算坏处，使用组合会比使用继承好的多，拓展性和灵活性更高。</p>
<p><strong>没有特别明显的区分</strong>是因为和普通的静态方法一样，调用者未必知道他是用来创建对象的方法，可能就是普通的函数，毕竟静态工厂不像构造器又强制性约束。但是我们可以用一些名称弥补。</p>
<ul>
<li><code>of</code>、<code>valueOf</code>： 返回的实例与参数的值相同</li>
<li><code>getInstance</code>： 获取该类实例，但是可以是同一个实例。</li>
<li><code>newInstance</code>： 获取该类实例，每一个实例都是不一样的。</li>
<li><code>getType</code>： 返回非该类实例，但是可以是同一个实例。</li>
<li><code>newType</code>： 返回非该类实例，每一个实例都是不一样的。</li>
</ul>
<h2 id="参数过多，考虑-Builder"><a href="#参数过多，考虑-Builder" class="headerlink" title="参数过多，考虑 Builder"></a>参数过多，考虑 Builder</h2><p>当一个对象所需要的参数是多的情况下，应考虑使用 <code>Builder</code> 来创建实例。</p>
<p>这一节在《代码整洁之道》第三章也有很好的描述。</p>
<p>重载构造器，随着参数的不断增加，会变得不可控，而且参数类型相同的情况下很难保证顺序上层是否调用正确。</p>
<p>对于 <code>setter</code> 方式则分散重载构造器的压力到各个 <code>set</code> 方法中，虽然可读性提高，但是由于 <code>set</code> 方法可以改变其属性，造成实例对象不是非可变的，致使这在多线程中是不安全的。</p>
<p><code>Builder</code> 模式则拥有重载构造器那样的安全性和 <code>JavaBean</code> 那样的良好可读性。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> carbohydrate;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NutritionFacts</span><span class="params">(Builder builder)</span> </span>&#123;</div><div class="line">        servings = builder.servings;</div><div class="line">        servingSize = builder.servingSize;</div><div class="line">        fat = builder.fat;</div><div class="line">        sodium = builder.sodium;</div><div class="line">        calories = builder.calories;</div><div class="line">        carbohydrate = builder.carbohydrate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> fat = <span class="number">0</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> sodium = <span class="number">0</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> calories = <span class="number">0</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> carbohydrate = <span class="number">0</span>;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> servings, <span class="keyword">int</span> servingSize)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.servings = servings;</div><div class="line">            <span class="keyword">this</span>.servingSize = servingSize;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">fat</span><span class="params">(<span class="keyword">int</span> fat)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.fat = fat;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sodium</span><span class="params">(<span class="keyword">int</span> sodium)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.sodium = sodium;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">calories</span><span class="params">(<span class="keyword">int</span> calories)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.calories = calories;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">carbohydrate</span><span class="params">(<span class="keyword">int</span> carbohydrate)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.carbohydrate = carbohydrate;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> NutritionFacts <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NutritionFacts(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如此构建出来的 <code>NutritionFacts</code> 是不可变的，且可读性良好。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> NutritionFacts.Builder(<span class="number">240</span>, <span class="number">8</span>)</div><div class="line">	.sodium(<span class="number">35</span>)</div><div class="line">	.calories(<span class="number">100</span>)</div><div class="line">	.carbohydrate(<span class="number">27</span>)</div><div class="line">	.build();</div></pre></td></tr></table></figure>
<h2 id="避免创建不必要的对象"><a href="#避免创建不必要的对象" class="headerlink" title="避免创建不必要的对象"></a>避免创建不必要的对象</h2><ul>
<li>基础类型优于包装类型</li>
<li>如果对象的存在允许不可变，它始终能被重用</li>
</ul>
<h2 id="消除过期引用（TODO）"><a href="#消除过期引用（TODO）" class="headerlink" title="消除过期引用（TODO）"></a>消除过期引用（TODO）</h2><ul>
<li>消除对象引用最好的方法是：让包含该引用的变量结束其生命周期。（45条）</li>
</ul>
<p>参考 <code>Glide</code>：</p>
<ul>
<li><a href="https://github.com/bumptech/glide/blob/master/library/src/main/java/com/bumptech/glide/manager/ActivityFragmentLifecycle.java" target="_blank" rel="external">ActivityFragmentLifecycle.lifecycleListeners</a></li>
<li><a href="https://github.com/sjudd/DiskLruCache/blob/master/src/main/java/com/bumptech/glide/disklrucache/DiskLruCache.java" target="_blank" rel="external">DiskLruCache.lruEntries</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是 &lt;code&gt;Effect Java&lt;/code&gt; 第二章内容阅读笔记，笔记内容主要为静态工厂替代构造方法的记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>基于 JWT 的 RESTful 授权简单实现</title>
    <link href="http://yoursite.com/2017/07/02/spring-boot-security-jwt/"/>
    <id>http://yoursite.com/2017/07/02/spring-boot-security-jwt/</id>
    <published>2017-07-02T06:55:55.000Z</published>
    <updated>2017-07-17T03:52:21.743Z</updated>
    
    <content type="html"><![CDATA[<p>本文起因是写 <code>Android</code> 程序时后端多数采用基于 <code>Token</code> 的 <code>RESTful</code> 风格 API。本着学习的态度本地简单实现一下。</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于 <code>RESTful</code> 概念的通俗理解可以参考该<a href="https://www.zhihu.com/question/28557115" target="_blank" rel="external">知乎链接</a>。</p>
<p><strong>使用技术</strong></p>
<ul>
<li>JWT（JSON Web Token）</li>
<li>spring boot</li>
<li>spring-boot-starter-security</li>
<li>spring-boot-starter-data-mongodb</li>
</ul>
<p>实现的基本流程如图：</p>
<p><img src="http://git.oschina.net/jocens/source/raw/master/spring-security-1.png" alt=""></p>
<h2 id="后台实现"><a href="#后台实现" class="headerlink" title="后台实现"></a>后台实现</h2><p>后台基于 <code>Gradle</code> 进行构建，读者也可以自行选择 <code>Maven</code> 构建。</p>
<p><strong>build.gradle</strong></p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">buildscript</span> &#123;</div><div class="line">    ext &#123;</div><div class="line">        springBootVersion = <span class="string">'1.5.4.RELEASE'</span></div><div class="line">		jwtVersion = <span class="string">'0.7.0'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">	<span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-data-mongodb'</span>)</div><div class="line">	<span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-jersey'</span>)</div><div class="line">	<span class="keyword">compile</span>(<span class="string">'org.springframework.boot:spring-boot-starter-security'</span>)</div><div class="line">	<span class="keyword">compile</span>(<span class="string">"io.jsonwebtoken:jjwt:$&#123;jwtVersion&#125;"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>理解一下 <code>Spring Security</code> 处理机制。</p>
<p>首先了解一下涉及到的接口和类：</p>
<ul>
<li><code>UserDetails</code>（Spring Security 中的用户信息规范）</li>
<li><code>UserDetailsService</code>（依旧自身业务逻辑提供给 Spring Security 一个用户信息规范）</li>
<li><code>WebSecurityConfigurerAdapter</code>（安全配置）</li>
<li><code>AuthenticationEntryPoint</code>（授权失败处理）</li>
<li><code>Authentication</code>（包含授权信息的领域模型）</li>
<li><code>SecurityContextHolder</code> （存放当前应用程序的当前安全上下文中的细节）</li>
</ul>
<p><strong>持久层</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span> <span class="keyword">private</span> String id;</div><div class="line"></div><div class="line">    <span class="meta">@Indexed</span>(unique = <span class="keyword">true</span>, direction = IndexDirection.DESCENDING, dropDups = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String email;</div><div class="line">    <span class="keyword">private</span> String firstName;</div><div class="line">    <span class="keyword">private</span> String lastName;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Date lastPasswordResetDate;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;Authority&gt; authorities;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Authority</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String role;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Login</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">User</span>, <span class="title">String</span>&gt; </span>&#123;</div><div class="line">    <span class="function">User <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>授权功能</strong></p>
<p>首先实现基于 <code>JWT</code> 的 <code>Spring Security</code> 用户信息规范。</p>
<p>规范中必须提供的属性：</p>
<ul>
<li>用户名</li>
<li>密码</li>
<li>权限集</li>
<li>帐号过期与否</li>
<li>锁定与否</li>
<li>凭证过期与否</li>
<li>是否有效</li>
</ul>
<p>非必要提供的属性：</p>
<ul>
<li>重置密码时间（用来提检查 <code>JWT</code> 是否过期等）</li>
</ul>
<p>这些属性的用处体现在 <code>AbstractUserDetailsAuthenticationProvider.DefaultPreAuthenticationChecks#check</code> 方法中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUser</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String username;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String password;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Date lastPasswordResetDate;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Collection&lt;? extends GrantedAuthority&gt; authorities;</div><div class="line"></div><div class="line"></div><div class="line">    JwtUser(String username, String password, Collection&lt;? extends GrantedAuthority&gt; authorities, Date lastPasswordResetDate) &#123;</div><div class="line">        <span class="keyword">this</span>.username = username;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">        <span class="keyword">this</span>.authorities = authorities;</div><div class="line">        <span class="keyword">this</span>.lastPasswordResetDate = lastPasswordResetDate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</div><div class="line">        <span class="keyword">return</span> authorities;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> username;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getLastPasswordResetDate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> lastPasswordResetDate;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来根据自身的业务逻辑实现 <code>UserDetailsService</code> 并提供 <code>UserDetails</code> 给 <code>Spring Security</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserRepository userRepository;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JwtUserDetailsService</span><span class="params">(UserRepository userRepository)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userRepository = userRepository;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</div><div class="line">        User user = userRepository.findByUsername(username);</div><div class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"can not found user for"</span> + username);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> JwtUserFactory.create(user);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JwtUserFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">JwtUserFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> JwtUser <span class="title">create</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtUser(</div><div class="line">            user.getUsername(),</div><div class="line">            user.getPassword(),</div><div class="line">            mapToGrantedAuthorities(user.getAuthorities()),</div><div class="line">            user.getLastPasswordResetDate()</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;GrantedAuthority&gt; <span class="title">mapToGrantedAuthorities</span><span class="params">(List&lt;Authority&gt; authorities)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> authorities.stream()</div><div class="line">            .map(Authority::getRole)</div><div class="line">            .map(SimpleGrantedAuthority::<span class="keyword">new</span>)</div><div class="line">            .collect(Collectors.toList());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来就是 <code>JWT</code> 的生成和验证，下面代码比较简单。具体更完整的实现参考<a href="https://github.com/szerhusenBC/jwt-spring-security-demo/blob/master/src/main/java/org/zerhusen/security/JwtTokenUtil.java" target="_blank" rel="external">该链接</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">public class JwtTokenUtil &#123;</div><div class="line"></div><div class="line">    private static final String CLAIM_KEY_CREATED = &quot;created&quot;;</div><div class="line"></div><div class="line">    @Value(&quot;$&#123;jwt.secret&#125;&quot;)</div><div class="line">    private String secret;</div><div class="line"></div><div class="line">    @Value(&quot;$&#123;jwt.expiration&#125;&quot;)</div><div class="line">    private Long expiration;</div><div class="line"></div><div class="line"></div><div class="line">    public boolean validateToken(String token, UserDetails userDetails) &#123;</div><div class="line">        JwtUser user = (JwtUser) userDetails;</div><div class="line">        final String username = parseUsernameFromToken(token);</div><div class="line">        final Date created = parseCreatedDateFromToken(token);</div><div class="line">        return (username.equals(user.getUsername())</div><div class="line">            &amp;&amp; !isTokenExpired(token)</div><div class="line">            &amp;&amp; !isCreatedBeforeLastPasswordReset(created, user.getLastPasswordResetDate()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public String generateToken(UserDetails userDetails) &#123;</div><div class="line">        JwtBuilder builder = Jwts.builder();</div><div class="line"></div><div class="line">        builder</div><div class="line">            // claim (payload)</div><div class="line">            .claim(CLAIM_KEY_CREATED, new Date())</div><div class="line">            .setSubject(userDetails.getUsername())</div><div class="line">            .setExpiration(generateExpirationDate())</div><div class="line">            // header signature algorithm and secret</div><div class="line">            .signWith(SignatureAlgorithm.HS512, secret);</div><div class="line"></div><div class="line">        return builder.compact();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public String parseUsernameFromToken(String token) &#123;</div><div class="line">        final Claims claims = parseClaimsFromToken(token);</div><div class="line">        return claims.getSubject();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public boolean canTokenBeRefreshed(String token, Date lastPasswordResetDate) &#123;</div><div class="line">        final Date created = parseCreatedDateFromToken(token);</div><div class="line">        return !isCreatedBeforeLastPasswordReset(created, lastPasswordResetDate) &amp;&amp;</div><div class="line">            !isTokenExpired(token);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public String refreshToken(String token) &#123;</div><div class="line">        Claims claims = parseClaimsFromToken(token);</div><div class="line">        claims.put(CLAIM_KEY_CREATED, new Date());</div><div class="line">        return generateToken(claims);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private boolean isTokenExpired(String token) &#123;</div><div class="line">        final Date expiration = parseExpirationDateFromToken(token);</div><div class="line">        return expiration.before(new Date());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private String generateToken(Claims claims) &#123;</div><div class="line">        return Jwts.builder()</div><div class="line">            .setClaims(claims)</div><div class="line">            .setExpiration(generateExpirationDate())</div><div class="line">            .signWith(SignatureAlgorithm.HS512, secret)</div><div class="line">            .compact();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private boolean isCreatedBeforeLastPasswordReset(Date created, Date lastPasswordRest) &#123;</div><div class="line">        return lastPasswordRest != null &amp;&amp; created.before(lastPasswordRest);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private Date parseExpirationDateFromToken(String token) &#123;</div><div class="line">        final Claims claims = parseClaimsFromToken(token);</div><div class="line">        return claims.getExpiration();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private Date parseCreatedDateFromToken(String token) &#123;</div><div class="line">        final Claims claims = parseClaimsFromToken(token);</div><div class="line">        return new Date((Long) claims.get(CLAIM_KEY_CREATED));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private Claims parseClaimsFromToken(String token) &#123;</div><div class="line">        return Jwts.parser()</div><div class="line">            .setSigningKey(secret)</div><div class="line">            .parseClaimsJws(token)</div><div class="line">            .getBody();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private Date generateExpirationDate() &#123;</div><div class="line">        return new Date(System.currentTimeMillis() + expiration * 1000);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后实现一下我们的过滤链，继承抽象类 <code>OncePerRequestFilter</code> 实现内部过滤，目的是当请求的 <code>Token</code> 有效时路由到指定的资源控制器，否则做授权异常处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">public class JwtAuthenticationTokenFilter extends OncePerRequestFilter &#123;</div><div class="line"></div><div class="line">    @Autowired UserDetailsService userDetailsService;</div><div class="line"></div><div class="line">    @Autowired JwtTokenUtil jwtTokenUtil;</div><div class="line"></div><div class="line">    @Value(&quot;$&#123;jwt.header&#125;&quot;) String tokenHeader;</div><div class="line"></div><div class="line">    @Value(&quot;$&#123;jwt.tokenPrefix&#125;&quot;) String tokenPrefix;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</div><div class="line">        throws ServletException, IOException &#123;</div><div class="line">        String authenticationHeader = request.getHeader(tokenHeader);</div><div class="line"></div><div class="line">        if (checkTokenHeader(authenticationHeader)) &#123;</div><div class="line"></div><div class="line">            final String token = getTokenFromHeader(authenticationHeader);</div><div class="line">            final String username = jwtTokenUtil.getUsernameFromToken(token);</div><div class="line"></div><div class="line">            if (!checkAuthorized(username)) &#123;</div><div class="line">                UserDetails userDetails = userDetailsService.loadUserByUsername(username);</div><div class="line"></div><div class="line">                if (jwtTokenUtil.validateToken(token, userDetails)) &#123;</div><div class="line">                    UsernamePasswordAuthenticationToken authenticationToken</div><div class="line">                        = new UsernamePasswordAuthenticationToken(userDetails, null,</div><div class="line">                        userDetails.getAuthorities());</div><div class="line">                    // AuthenticationDetailsSource 登录过程中对用户的登录信息的详细信息进行填充</div><div class="line">                    authenticationToken.setDetails(</div><div class="line">                        new WebAuthenticationDetailsSource().buildDetails(request));</div><div class="line">                    SecurityContextHolder.getContext().setAuthentication(authenticationToken);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        filterChain.doFilter(request, response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private boolean checkTokenHeader(String authenticationHeader) &#123;</div><div class="line">        return authenticationHeader != null &amp;&amp; authenticationHeader.startsWith(tokenPrefix);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private boolean checkAuthorized(String username) &#123;</div><div class="line">        return username != null &amp;&amp; SecurityContextHolder.getContext().getAuthentication() != null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private String getTokenFromHeader(String authenticationHeader) &#123;</div><div class="line">        return authenticationHeader.substring(tokenPrefix.length());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>授权异常处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthenticationEntryPoint</span> <span class="keyword">implements</span> <span class="title">AuthenticationEntryPoint</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span></span></div><div class="line">        <span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line">        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>核心的代码基本实现，剩余的 <code>Web</code> 层代码和配置代码比较简单，参考该<a href="https://github.com/szerhusenBC/jwt-spring-security-demo" target="_blank" rel="external">项目</a>。</p>
<h2 id="源码机制简单分析"><a href="#源码机制简单分析" class="headerlink" title="源码机制简单分析"></a>源码机制简单分析</h2><p>首先看授权部分，这是一个基本的发起授权请求的处理流程。</p>
<p><img src="http://git.oschina.net/jocens/source/raw/master/spring-security-2.png" alt=""></p>
<p>由于是授权请求，我们最后实际走的核心代码是授权功能的逻辑代码（AuthServiceImpl）。</p>
<p>而再 <code>AuthServiceImpl</code> 我们使用到了</p>
<ul>
<li><code>JwtTokenUtil</code></li>
<li><code>UserRepository</code></li>
<li><code>UserDetailsService</code></li>
<li><code>AuthenticationManager</code></li>
</ul>
<p>先看一下流程图，再分析源码。</p>
<p><img src="http://git.oschina.net/jocens/source/raw/master/spring-security-3.png" alt=""></p>
<p>基于上图，实际上我们使用到的实现了 <code>AuthenticationManager</code> 接口的 <code>ProviderManager</code>。我们调用 <code>ProviderManager#authenticate</code> 方法，并且传入一个基于用户名和密码的授权信息（UsernamePasswordAuthenticationToken），进而执行验证。</p>
<p>但是细心看 <code>AuthenticationManager</code> 内部中真正执行授权的任务委托给了 <code>AuthenticationProvider</code> 接口的实现<code>DaoAuthenticationProvider</code>，<code>DaoAuthenticationProvider</code> 继承自 <code>AbstractUserDetailsAuthenticationProvider</code> 抽象类。</p>
<p>我们看一下</p>
<p><code>ProviderManager.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 简化代码</span></div><div class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></div><div class="line">		<span class="keyword">throws</span> AuthenticationException &#123;</div><div class="line"></div><div class="line">	<span class="comment">// 检索授权委托者, 即 AbstractUserDetailsAuthenticationProvider 的子类 DaoAuthenticationProvider</span></div><div class="line">	<span class="keyword">for</span> (AuthenticationProvider provider : getProviders()) &#123;</div><div class="line">		<span class="keyword">if</span> (!provider.supports(toTest)) &#123;</div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			result = provider.authenticate(authentication);</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</div><div class="line">				copyDetails(authentication, result);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="keyword">throw</span> e;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>AbstractUserDetailsAuthenticationProvider.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 简化代码</span></div><div class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></div><div class="line">			<span class="keyword">throws</span> AuthenticationException &#123;</div><div class="line">	String username = (authentication.getPrincipal() == <span class="keyword">null</span>) ? <span class="string">"NONE_PROVIDED"</span></div><div class="line">			: authentication.getName();</div><div class="line"></div><div class="line">	<span class="keyword">boolean</span> cacheWasUsed = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">	<span class="comment">// 缓存中是否有授权用户，显然没有</span></div><div class="line">	UserDetails user = <span class="keyword">this</span>.userCache.getUserFromCache(username); </div><div class="line"></div><div class="line">	<span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</div><div class="line">		cacheWasUsed = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// DaoAuthenticationProvider 执行实际检索，这里检索使用到了我们实现的 `JwtUserDetailsService`。 </span></div><div class="line">			user = retrieveUser(username,</div><div class="line">					(UsernamePasswordAuthenticationToken) authentication);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (UsernameNotFoundException notFound) &#123;</div><div class="line">			<span class="keyword">throw</span> notFound;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="comment">// 检查 UserDetials 是否过期、锁定等等</span></div><div class="line">		preAuthenticationChecks.check(user);</div><div class="line">		<span class="comment">// 检查密码是否正确</span></div><div class="line">		additionalAuthenticationChecks(user,</div><div class="line">				(UsernamePasswordAuthenticationToken) authentication);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (AuthenticationException exception) &#123;</div><div class="line">		<span class="keyword">throw</span> exception;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 成功返回授权信息 UsernamePasswordAuthenticationToken。</span></div><div class="line">	<span class="keyword">return</span> createSuccessAuthentication(principalToReturn, authentication, user);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到此为止授权成功，接着我们根据凭证（UsernamePasswordAuthenticationToken）中的 <code>username</code> 查找指定的 <code>User</code> 并生成 <code>JWT</code> 进行颁发。</p>
<p>下图是请求其他资源并携带 <code>Token</code> 的流程如下。通过过滤的时进行判断是否授权，接着路由到指定的 <code>Controller</code>。</p>
<p><img src="http://git.oschina.net/jocens/source/raw/master/spring-security-4.png" alt=""></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://github.com/szerhusenBC/jwt-spring-security-demo" target="_blank" rel="external">代码参考</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文起因是写 &lt;code&gt;Android&lt;/code&gt; 程序时后端多数采用基于 &lt;code&gt;Token&lt;/code&gt; 的 &lt;code&gt;RESTful&lt;/code&gt; 风格 API。本着学习的态度本地简单实现一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JWT 摘要</title>
    <link href="http://yoursite.com/2017/07/01/jwt/"/>
    <id>http://yoursite.com/2017/07/01/jwt/</id>
    <published>2017-07-01T06:41:28.000Z</published>
    <updated>2017-07-11T07:11:30.517Z</updated>
    
    <content type="html"><![CDATA[<p>本文是 <code>JWT</code> （JSON Web Token） 一些记录。</p>
<a id="more"></a>
<h2 id="JWT-组成"><a href="#JWT-组成" class="headerlink" title="JWT 组成"></a>JWT 组成</h2><p><strong>Claims（Payload）</strong></p>
<p>负载部分(实际数据)。可以包含自定义的字段属性。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"iss"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"iat"</span>: <span class="number">1499756713070</span>,</div><div class="line">    <span class="attr">"exp"</span>: <span class="number">1499756713070</span>,</div><div class="line">    <span class="attr">"aud"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"sub"</span>: <span class="string">""</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>iss</code> 是 JWT 签发者（Issuer）</li>
<li><code>iat</code> 是签发时间（Issued At）</li>
<li><code>exp</code> 是过期时间（Expiration）</li>
<li><code>aud</code> 是接收者（Audience）</li>
<li><code>sub</code> 是主题（Subject）</li>
</ul>
<p>上述的 <code>JSON</code> 进行 <code>Base64</code> 编码得到的结果，称为 <code>JWT</code> 的 <code>Payload</code> 部分。</p>
<blockquote>
<p>Base64 只是一种编码，是可逆转翻译的。</p>
</blockquote>
<p><strong>头部（Header）</strong></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"typ"</span>: <span class="string">"JWT"</span>,</div><div class="line">  <span class="attr">"alg"</span>: <span class="string">"HS256"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>typ</code> 是 <code>JWT</code> 类型，可以忽略</li>
<li><code>alg</code> 是 <code>JWT</code> 用的签名算法</li>
</ul>
<p>依旧是 <code>Base64</code> 进行编码。</p>
<p><strong>签名（Signature）</strong></p>
<p>将上述的 <code>Payload</code> 和 <code>Header</code> 各自的 <code>Base64</code> 字符串使用 <code>.</code> 拼接后再进行 <code>HS256</code> 进行加密，这个加密的过程还需要提供一个 <code>secret</code>。最后形成签名部分。</p>
<p>最后将这三个部分使用 <code>.</code> 进行拼接，形成完整的 <code>JWT</code>。</p>
<h2 id="签名的目的"><a href="#签名的目的" class="headerlink" title="签名的目的"></a>签名的目的</h2><p>签名的目的是确保不一样的输入产生不一样的输出。<code>Payload</code> 篡改后即使 <code>Header</code> 一样，签名也会不一样。这样服务器根据接收 <code>Payload</code> 和 <code>Header</code> 进行再签名然后对比接收的签名，结果不一致的话返回 <code>Unauthorized（401）</code> 的响应。</p>
<h3 id="信息会暴露？"><a href="#信息会暴露？" class="headerlink" title="信息会暴露？"></a>信息会暴露？</h3><p>会暴露，所以我们进行 <code>JWT</code> 传输应该避免放入敏感信息（比如：密码）。这样就算被恶意截取信息进行 <code>Base64</code> 解码，也没什么关系。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Gradle：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile(&quot;io.jsonwebtoken:jjwt:0.7.0&quot;)</div></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSampleToken</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    User user = <span class="keyword">new</span> User();</div><div class="line">    user.setPassword(<span class="string">"pass"</span>);</div><div class="line">    user.setUsername(<span class="string">"username"</span>);</div><div class="line">    user.setLastPasswordResetDate(<span class="keyword">new</span> Date());</div><div class="line">    user.setEmail(<span class="string">"username@email.com"</span>);</div><div class="line"></div><div class="line">    String mockSecret = <span class="string">"ssl-secret"</span>;</div><div class="line"></div><div class="line">    String token = Jwts.builder()</div><div class="line">        .setIssuedAt(<span class="keyword">new</span> Date())</div><div class="line">        .setExpiration(<span class="keyword">new</span> Date(System.currentTimeMillis() + <span class="number">604800</span> * <span class="number">1000</span>))</div><div class="line">        .setSubject(user.getUsername())</div><div class="line">        .signWith(SignatureAlgorithm.HS512, mockSecret)</div><div class="line">        .compact();</div><div class="line">    System.out.println(token);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extraUsernameFromToken</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    String token</div><div class="line">        = <span class="string">"eyJhbGciOiJIUzUxMiJ9.eyJpYXQiOjE0OTk3NTExMDAsImV4cCI6MTUwMDM1NTkwMCwic3ViIjoidXNlcm5hbWUifQ.l34epQKUnPfuPAigtRuf03_6uFpWjCs0ONDiqJXSqD_rx32NUyA9EYzS1p9v5z0a6E6DwUJlt9MQN_y3Gnn_BQ"</span>;</div><div class="line">    String mockSecret = <span class="string">"ssl-secret"</span>;</div><div class="line">    Claims claims = Jwts.parser()</div><div class="line">        .setSigningKey(mockSecret)</div><div class="line">        .parseClaimsJws(token)</div><div class="line">        .getBody();</div><div class="line">    String username = claims.getSubject();</div><div class="line">    Assert.assertEquals(<span class="string">"username"</span>, username);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><a href="https://jwt.io/introduction/" target="_blank" rel="external">介绍视频</a></li>
<li><a href="http://blog.leapoahead.com/2015/09/07/user-authentication-with-jwt/" target="_blank" rel="external">八幅漫画理解使用 JSON Web Token 设计单点登录系统</a></li>
<li><a href="https://jwt.io/#debugger" target="_blank" rel="external">在线测试工具</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%9C%89%E6%95%88%E8%B4%9F%E8%BD%BD" target="_blank" rel="external">有效负载</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是 &lt;code&gt;JWT&lt;/code&gt; （JSON Web Token） 一些记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Averson</title>
    <link href="http://yoursite.com/2017/06/06/hello-world/"/>
    <id>http://yoursite.com/2017/06/06/hello-world/</id>
    <published>2017-06-06T08:16:16.000Z</published>
    <updated>2017-07-13T07:25:16.303Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<blockquote>
<p>平凡的程序员！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;平凡的程序员！&lt;/p&gt;
&lt;/blockquote&gt;

    
    </summary>
    
    
      <category term="个人" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
</feed>
